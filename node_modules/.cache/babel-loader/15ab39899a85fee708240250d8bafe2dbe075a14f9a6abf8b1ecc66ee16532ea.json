{"ast":null,"code":"var _jsxFileName = \"/Users/depblu/Documents/GitHub/JasonDepblu.github.io/src/components/ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MessageList from './MessageList';\nimport ChatInput from './ChatInput';\nimport StreamToggle from './StreamToggle';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport useChatApi from '../hooks/useChatApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  // 状态管理\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useLocalStorage('chatSessionId', null);\n  const [useStream, setUseStream] = useState(true);\n  const [thinking, setThinking] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 使用自定义Hook进行API通信\n  const {\n    initiateRequest,\n    handleStreamingResponse,\n    pollForResult,\n    checkAnswer,\n    streamFailureCount\n  } = useChatApi(sessionId, setSessionId);\n\n  // 处理流式响应失败时的UI反馈\n  useEffect(() => {\n    if (streamFailureCount >= 3 && useStream) {\n      setUseStream(false);\n      addMessage('ai', '已自动关闭流式响应模式，因为检测到多次连接失败。', false, true);\n    }\n  }, [streamFailureCount, useStream]);\n\n  // 添加消息到聊天记录\n  const addMessage = useCallback((type, content, isStreaming = false, error = false) => {\n    setMessages(prev => [...prev, {\n      type,\n      content,\n      isStreaming,\n      error\n    }]);\n  }, []);\n\n  // 更新流式消息内容\n  const updateStreamMessage = useCallback(content => {\n    setMessages(prev => {\n      const newMessages = [...prev];\n      const lastIndex = newMessages.length - 1;\n      if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n        newMessages[lastIndex] = {\n          ...newMessages[lastIndex],\n          content\n        };\n      }\n      return newMessages;\n    });\n  }, []);\n\n  // 检查特定请求的结果\n  const handleCheckAnswer = useCallback(async requestId => {\n    const thinkingId = 'checking-' + Date.now();\n    setThinking({\n      id: thinkingId,\n      text: '检查结果中'\n    });\n    setIsProcessing(true);\n    try {\n      const result = await checkAnswer(requestId);\n      setThinking(null);\n      handleResult(result);\n    } catch (error) {\n      setThinking(null);\n      addMessage('ai', `检查失败: ${error.message}`, false, true);\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [addMessage, checkAnswer]);\n\n  // 处理API结果\n  const handleResult = useCallback(result => {\n    if (result.status === \"timeout\") {\n      // 超时但仍在处理\n      addMessage('ai', `${result.message} <button onClick={() => window.checkAnswer('${result.requestId}')}>检查是否已完成</button>`, false, false);\n      return;\n    }\n    if (result.answer) {\n      // 更新会话ID\n      if (result.sessionId) {\n        setSessionId(result.sessionId);\n      }\n\n      // 渲染回答\n      addMessage('ai', result.answer);\n    } else if (result.status === \"error\") {\n      // 处理错误\n      addMessage('ai', result.error || '处理完成，但没有获得回答', false, true);\n    } else {\n      // 没有回答\n      addMessage('ai', '处理完成，但没有获得回答', false, true);\n    }\n  }, [addMessage, setSessionId]);\n\n  // 处理用户发送的消息\n  const handleSendMessage = useCallback(async question => {\n    if (!question.trim()) return;\n\n    // 禁用输入，显示处理状态\n    setIsProcessing(true);\n\n    // 添加用户消息到UI\n    addMessage('user', question);\n\n    // 添加\"思考中\"的提示\n    const thinkingId = 'thinking-' + Date.now();\n    setThinking({\n      id: thinkingId,\n      attempts: 0\n    });\n    try {\n      // 调用API获取请求ID或直接获取答案\n      const result = await initiateRequest(question, useStream);\n\n      // 如果收到直接答案\n      if (result.directAnswer) {\n        setThinking(null);\n        addMessage('ai', result.answer);\n        setIsProcessing(false);\n        return;\n      }\n\n      // 如果收到流式配置\n      if (result.streamConfig) {\n        // 移除思考中状态\n        setThinking(null);\n\n        // 添加一个空的流式消息容器\n        addMessage('ai', '', true);\n\n        // 处理流式响应\n        const streamResult = await handleStreamingResponse(result.streamConfig, updateStreamMessage);\n        if (streamResult === false) {\n          // 流式处理失败，更新最后一条消息为错误\n          setMessages(prev => {\n            const newMessages = [...prev];\n            const lastIndex = newMessages.length - 1;\n            if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n              // 移除流式状态，标记为错误\n              newMessages[lastIndex] = {\n                ...newMessages[lastIndex],\n                isStreaming: false,\n                error: true,\n                content: '流式响应出错，正在切换到标准模式...'\n              };\n            }\n            return newMessages;\n          });\n\n          // 回退到标准处理\n          const standardResult = await initiateRequest(question, false);\n          if (!standardResult.directAnswer) {\n            // 重新添加思考中状态\n            setThinking({\n              id: thinkingId,\n              attempts: 0\n            });\n\n            // 启动常规轮询\n            const pollResult = await pollForResult(standardResult.requestId);\n            setThinking(null);\n            handleResult(pollResult);\n          } else {\n            // 直接显示标准答案\n            addMessage('ai', standardResult.answer);\n          }\n        } else {\n          // 流式处理成功，更新最后一条消息，移除流式状态\n          setMessages(prev => {\n            const newMessages = [...prev];\n            const lastIndex = newMessages.length - 1;\n            if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n              newMessages[lastIndex] = {\n                ...newMessages[lastIndex],\n                isStreaming: false\n              };\n            }\n            return newMessages;\n          });\n        }\n        setIsProcessing(false);\n        return;\n      }\n\n      // 如果收到了快速响应，先显示它\n      if (result.quickResponse) {\n        // 更新思考中状态以显示快速响应\n        setThinking({\n          id: thinkingId,\n          text: result.quickResponse\n        });\n      }\n\n      // 开始轮询检查结果\n      const pollResult = await pollForResult(result.requestId);\n\n      // 移除思考中状态\n      setThinking(null);\n\n      // 根据结果更新UI\n      handleResult(pollResult);\n    } catch (err) {\n      // 移除思考中状态\n      setThinking(null);\n      console.error('处理失败:', err);\n      addMessage('ai', `获取回答失败: ${err.message}`, false, true);\n    } finally {\n      // 恢复输入状态\n      setIsProcessing(false);\n    }\n  }, [addMessage, handleResult, handleStreamingResponse, initiateRequest, pollForResult, updateStreamMessage, useStream]);\n\n  // 清除会话\n  const handleClearSession = useCallback(() => {\n    if (window.confirm('确定要开始新的对话吗？这将清除当前的对话历史。')) {\n      localStorage.removeItem('chatSessionId');\n      setSessionId(null);\n      setMessages([]);\n      addMessage('ai', '已开始新的对话。');\n    }\n  }, [addMessage, setSessionId]);\n\n  // 切换流式响应模式\n  const handleToggleStream = useCallback(e => {\n    setUseStream(e.target.checked);\n  }, []);\n\n  // 公开checkAnswer方法给window对象，以便按钮onclick能正常工作\n  useEffect(() => {\n    window.checkAnswer = handleCheckAnswer;\n    return () => {\n      delete window.checkAnswer;\n    };\n  }, [handleCheckAnswer]);\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    class: \"post-layout\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages,\n        thinking: thinking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        onSendMessage: handleSendMessage,\n        disabled: isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(StreamToggle, {\n          checked: useStream,\n          onChange: handleToggleStream\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"clear-session\",\n          onClick: handleClearSession,\n          title: \"\\u5F00\\u59CB\\u65B0\\u7684\\u5BF9\\u8BDD\\uFF0C\\u6E05\\u9664\\u5BF9\\u8BDD\\u5386\\u53F2\",\n          children: \"\\u65B0\\u5BF9\\u8BDD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 7\n  }, this);\n}\n_s(ChatBot, \"Ad82qYmNvN5bkOKF7ZSi0xB7WOE=\", false, function () {\n  return [useLocalStorage, useChatApi];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MessageList","ChatInput","StreamToggle","useLocalStorage","useChatApi","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","sessionId","setSessionId","useStream","setUseStream","thinking","setThinking","isProcessing","setIsProcessing","initiateRequest","handleStreamingResponse","pollForResult","checkAnswer","streamFailureCount","addMessage","type","content","isStreaming","error","prev","updateStreamMessage","newMessages","lastIndex","length","handleCheckAnswer","requestId","thinkingId","Date","now","id","text","result","handleResult","message","status","answer","handleSendMessage","question","trim","attempts","directAnswer","streamConfig","streamResult","standardResult","pollResult","quickResponse","err","console","handleClearSession","window","confirm","localStorage","removeItem","handleToggleStream","e","target","checked","class","children","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","disabled","className","onChange","onClick","title","_c","$RefreshReg$"],"sources":["/Users/depblu/Documents/GitHub/JasonDepblu.github.io/src/components/ChatBot.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport MessageList from './MessageList';\nimport ChatInput from './ChatInput';\nimport StreamToggle from './StreamToggle';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport useChatApi from '../hooks/useChatApi';\n\nfunction ChatBot() {\n  // 状态管理\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useLocalStorage('chatSessionId', null);\n  const [useStream, setUseStream] = useState(true);\n  const [thinking, setThinking] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 使用自定义Hook进行API通信\n  const {\n    initiateRequest,\n    handleStreamingResponse,\n    pollForResult,\n    checkAnswer,\n    streamFailureCount\n  } = useChatApi(sessionId, setSessionId);\n\n  // 处理流式响应失败时的UI反馈\n  useEffect(() => {\n    if (streamFailureCount >= 3 && useStream) {\n      setUseStream(false);\n      addMessage('ai', '已自动关闭流式响应模式，因为检测到多次连接失败。', false, true);\n    }\n  }, [streamFailureCount, useStream]);\n\n  // 添加消息到聊天记录\n  const addMessage = useCallback((type, content, isStreaming = false, error = false) => {\n    setMessages(prev => [...prev, { type, content, isStreaming, error }]);\n  }, []);\n\n  // 更新流式消息内容\n  const updateStreamMessage = useCallback((content) => {\n    setMessages(prev => {\n      const newMessages = [...prev];\n      const lastIndex = newMessages.length - 1;\n\n      if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n        newMessages[lastIndex] = {\n          ...newMessages[lastIndex],\n          content\n        };\n      }\n\n      return newMessages;\n    });\n  }, []);\n\n  // 检查特定请求的结果\n  const handleCheckAnswer = useCallback(async (requestId) => {\n    const thinkingId = 'checking-' + Date.now();\n    setThinking({\n      id: thinkingId,\n      text: '检查结果中'\n    });\n    setIsProcessing(true);\n\n    try {\n      const result = await checkAnswer(requestId);\n      setThinking(null);\n      handleResult(result);\n    } catch (error) {\n      setThinking(null);\n      addMessage('ai', `检查失败: ${error.message}`, false, true);\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [addMessage, checkAnswer]);\n\n  // 处理API结果\n  const handleResult = useCallback((result) => {\n    if (result.status === \"timeout\") {\n      // 超时但仍在处理\n      addMessage('ai', `${result.message} <button onClick={() => window.checkAnswer('${result.requestId}')}>检查是否已完成</button>`, false, false);\n      return;\n    }\n\n    if (result.answer) {\n      // 更新会话ID\n      if (result.sessionId) {\n        setSessionId(result.sessionId);\n      }\n\n      // 渲染回答\n      addMessage('ai', result.answer);\n    } else if (result.status === \"error\") {\n      // 处理错误\n      addMessage('ai', result.error || '处理完成，但没有获得回答', false, true);\n    } else {\n      // 没有回答\n      addMessage('ai', '处理完成，但没有获得回答', false, true);\n    }\n  }, [addMessage, setSessionId]);\n\n  // 处理用户发送的消息\n  const handleSendMessage = useCallback(async (question) => {\n    if (!question.trim()) return;\n\n    // 禁用输入，显示处理状态\n    setIsProcessing(true);\n\n    // 添加用户消息到UI\n    addMessage('user', question);\n\n    // 添加\"思考中\"的提示\n    const thinkingId = 'thinking-' + Date.now();\n    setThinking({\n      id: thinkingId,\n      attempts: 0\n    });\n\n    try {\n      // 调用API获取请求ID或直接获取答案\n      const result = await initiateRequest(question, useStream);\n\n      // 如果收到直接答案\n      if (result.directAnswer) {\n        setThinking(null);\n        addMessage('ai', result.answer);\n        setIsProcessing(false);\n        return;\n      }\n\n      // 如果收到流式配置\n      if (result.streamConfig) {\n        // 移除思考中状态\n        setThinking(null);\n\n        // 添加一个空的流式消息容器\n        addMessage('ai', '', true);\n\n        // 处理流式响应\n        const streamResult = await handleStreamingResponse(\n          result.streamConfig,\n          updateStreamMessage\n        );\n\n        if (streamResult === false) {\n          // 流式处理失败，更新最后一条消息为错误\n          setMessages(prev => {\n            const newMessages = [...prev];\n            const lastIndex = newMessages.length - 1;\n\n            if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n              // 移除流式状态，标记为错误\n              newMessages[lastIndex] = {\n                ...newMessages[lastIndex],\n                isStreaming: false,\n                error: true,\n                content: '流式响应出错，正在切换到标准模式...'\n              };\n            }\n\n            return newMessages;\n          });\n\n          // 回退到标准处理\n          const standardResult = await initiateRequest(question, false);\n\n          if (!standardResult.directAnswer) {\n            // 重新添加思考中状态\n            setThinking({\n              id: thinkingId,\n              attempts: 0\n            });\n\n            // 启动常规轮询\n            const pollResult = await pollForResult(standardResult.requestId);\n            setThinking(null);\n            handleResult(pollResult);\n          } else {\n            // 直接显示标准答案\n            addMessage('ai', standardResult.answer);\n          }\n        } else {\n          // 流式处理成功，更新最后一条消息，移除流式状态\n          setMessages(prev => {\n            const newMessages = [...prev];\n            const lastIndex = newMessages.length - 1;\n\n            if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n              newMessages[lastIndex] = {\n                ...newMessages[lastIndex],\n                isStreaming: false\n              };\n            }\n\n            return newMessages;\n          });\n        }\n\n        setIsProcessing(false);\n        return;\n      }\n\n      // 如果收到了快速响应，先显示它\n      if (result.quickResponse) {\n        // 更新思考中状态以显示快速响应\n        setThinking({\n          id: thinkingId,\n          text: result.quickResponse\n        });\n      }\n\n      // 开始轮询检查结果\n      const pollResult = await pollForResult(result.requestId);\n\n      // 移除思考中状态\n      setThinking(null);\n\n      // 根据结果更新UI\n      handleResult(pollResult);\n    } catch (err) {\n      // 移除思考中状态\n      setThinking(null);\n      console.error('处理失败:', err);\n      addMessage('ai', `获取回答失败: ${err.message}`, false, true);\n    } finally {\n      // 恢复输入状态\n      setIsProcessing(false);\n    }\n  }, [\n    addMessage,\n    handleResult,\n    handleStreamingResponse,\n    initiateRequest,\n    pollForResult,\n    updateStreamMessage,\n    useStream\n  ]);\n\n  // 清除会话\n  const handleClearSession = useCallback(() => {\n    if (window.confirm('确定要开始新的对话吗？这将清除当前的对话历史。')) {\n      localStorage.removeItem('chatSessionId');\n      setSessionId(null);\n      setMessages([]);\n      addMessage('ai', '已开始新的对话。');\n    }\n  }, [addMessage, setSessionId]);\n\n  // 切换流式响应模式\n  const handleToggleStream = useCallback((e) => {\n    setUseStream(e.target.checked);\n  }, []);\n\n  // 公开checkAnswer方法给window对象，以便按钮onclick能正常工作\n  useEffect(() => {\n    window.checkAnswer = handleCheckAnswer;\n\n    return () => {\n      delete window.checkAnswer;\n    };\n  }, [handleCheckAnswer]);\n\n  return (\n      <body class=\"post-layout\">\n        <div id=\"chat-container\">\n\n          <MessageList messages={messages} thinking={thinking} />\n\n          <ChatInput\n            onSendMessage={handleSendMessage}\n            disabled={isProcessing}\n          />\n\n          <div className=\"controls\">\n            <StreamToggle\n              checked={useStream}\n              onChange={handleToggleStream}\n            />\n\n            <button\n              id=\"clear-session\"\n              onClick={handleClearSession}\n              title=\"开始新的对话，清除对话历史\"\n            >\n              新对话\n            </button>\n          </div>\n        </div>\n      </body>\n  );\n}\n\nexport default ChatBot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}