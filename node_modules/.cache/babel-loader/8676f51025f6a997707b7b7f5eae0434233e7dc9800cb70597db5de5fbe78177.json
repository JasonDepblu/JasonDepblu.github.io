{"ast":null,"code":"// src/hooks/useChatApi.js\nimport{useState,useCallback}from'react';import{getApiUrl}from'../utils/apiConfig';import{GREETING_CACHE}from'../utils/greetingCache';// 轮询间隔和最大尝试次数\nconst POLL_INTERVAL=5000;const MAX_POLL_ATTEMPTS=60;const API_URL=getApiUrl();// 简单的哈希函数，用于识别重复问题\nfunction hashString(str){let hash=0;for(let i=0;i<str.length;i++){hash=(hash<<5)-hash+str.charCodeAt(i);hash|=0;// 转换为32位整数\n}return hash;}function useChatApi(sessionId,setSessionId){const[isProcessing,setIsProcessing]=useState(false);const[pendingRequests]=useState(new Map());const[streamFailureCount,setStreamFailureCount]=useState(0);// 发起初始请求，获取requestId或直接获取答案\nconst initiateRequest=useCallback(async function(question){let useStream=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;try{// 创建问题的哈希值以识别重复请求\nconst questionHash=hashString(question);// 检查是否已经在处理这个问题\nif(pendingRequests.has(questionHash)){console.log(\"这个问题的请求已在进行中\");return{inProgress:true};}// 添加到待处理请求\npendingRequests.set(questionHash,true);try{// 判断是否是简单问题\nconst isSimpleQuestion=question.length<50&&!question.includes(\"如何\")&&!question.includes(\"为什么\")&&!question.includes(\"比较\");const normalizedQuestion=question.toLowerCase().trim();// 检查是否是简单问候语\nif(GREETING_CACHE[normalizedQuestion]&&!useStream){return{directAnswer:true,answer:GREETING_CACHE[normalizedQuestion]};}let retries=0;const maxRetries=3;let lastError=null;while(retries<maxRetries){try{const response=await fetch(`${API_URL}/rag`,{method:'POST',headers:{'Content-Type':'application/json','Cache-Control':'no-cache'},body:JSON.stringify({question,sessionId:sessionId,preferFastResponse:isSimpleQuestion&&!useStream,stream:useStream})});if(!response.ok){const errorText=await response.text();throw new Error(`服务器错误 (${response.status}): ${errorText}`);}const data=await response.json();console.log(\"API响应收到:\",Object.keys(data));if(data.sessionId){setSessionId(data.sessionId);}if(data.answer){console.log(\"收到后端直接回答\");return{directAnswer:true,answer:data.answer};}if(data.streamConfig){console.log(\"收到流式配置\");return{directAnswer:false,streamConfig:data.streamConfig,requestId:data.requestId};}if(data.quickResponse){console.log(\"收到快速响应\");return{directAnswer:false,quickResponse:data.quickResponse,requestId:data.requestId};}if(data.fallbackToStandard){console.log(\"不支持流式响应，回退到标准处理\");return initiateRequest(question,false);}return{directAnswer:false,requestId:data.requestId};}catch(error){lastError=error;retries++;console.warn(`请求尝试${retries}失败: ${error.message}`);if(retries<maxRetries){const delay=Math.pow(2,retries)*1000;console.log(`${delay}ms后重试...`);await new Promise(resolve=>setTimeout(resolve,delay));}}}throw lastError||new Error('所有请求尝试均失败');}finally{// 处理完毕后从待处理请求中移除\npendingRequests.delete(questionHash);}}catch(error){console.error('初始化请求失败:',error);throw error;}},[pendingRequests,sessionId,setSessionId]);// 处理流式响应\nconst handleStreamingResponse=useCallback(async(streamConfig,onMessageUpdate)=>{try{var _streamConfig$message,_streamConfig$message2;console.log(\"设置流式连接...\");// 验证流式配置\nif(!streamConfig||!streamConfig.apiEndpoint||!streamConfig.model||!streamConfig.apiKey){console.error(\"无效的流式配置:\",JSON.stringify({...streamConfig,apiKey:streamConfig&&streamConfig.apiKey?\"[REDACTED]\":undefined},null,2));throw new Error(\"流式配置无效，无法建立连接\");}// 调试信息\nconsole.log(\"流式配置详情:\",{endpoint:streamConfig.apiEndpoint,model:streamConfig.model,messageCount:((_streamConfig$message=streamConfig.messages)===null||_streamConfig$message===void 0?void 0:_streamConfig$message.length)||0});// 创建请求体\nconst requestBody={model:streamConfig.model,messages:streamConfig.messages||[{role:\"user\",content:\"请提供回答\"}],stream:true,temperature:streamConfig.parameters.temperature,max_tokens:streamConfig.parameters.max_tokens,top_p:streamConfig.parameters.top_p};// 创建fetch选项\nconst options={method:'POST',headers:{'Authorization':`Bearer ${streamConfig.apiKey}`,'Content-Type':'application/json'},body:JSON.stringify(requestBody)};// 发送请求\nconsole.log(\"发送流式请求到:\",streamConfig.apiEndpoint);const response=await fetch(streamConfig.apiEndpoint,options);// 检查响应状态\nif(!response.ok){const errorText=await response.text();console.error(\"流式API错误响应:\",errorText);throw new Error(`API返回错误状态: ${response.status}`);}console.log(\"流式连接已建立，开始读取...\");// 设置流式读取器\nconst reader=response.body.getReader();const decoder=new TextDecoder(\"utf-8\");let fullResponse='';// 处理流式数据\nwhile(true){const{done,value}=await reader.read();if(done){console.log(\"流式传输完成\");break;}// 解码数据块\nconst chunk=decoder.decode(value);console.log(\"接收到数据块，大小:\",chunk.length);const lines=chunk.split('\\n');for(const line of lines){if(line.startsWith('data:')){const data=line.slice(5).trim();if(data==='[DONE]'){continue;}try{const parsed=JSON.parse(data);if(parsed.choices&&parsed.choices[0].delta&&parsed.choices[0].delta.content){const content=parsed.choices[0].delta.content;fullResponse+=content;// 更新UI\nonMessageUpdate(fullResponse);}}catch(parseError){console.warn(\"无法解析流式数据块:\",parseError.message);}}}}console.log(\"流式处理成功完成\");// 更新会话历史\nconst userQuestion=((_streamConfig$message2=streamConfig.messages.find(m=>m.role==='user'))===null||_streamConfig$message2===void 0?void 0:_streamConfig$message2.content)||'';await updateSessionAfterStreaming(sessionId,userQuestion,fullResponse);// 成功时重置失败计数\nsetStreamFailureCount(0);return fullResponse;}catch(error){console.error(\"流式处理错误:\",error);// 增加失败计数\nsetStreamFailureCount(prev=>prev+1);// 返回false表示失败，触发回退处理\nreturn false;}},[sessionId]);// 更新流式处理后的会话\nconst updateSessionAfterStreaming=useCallback(async(sessionId,question,answer)=>{try{console.log(\"更新流式处理后的会话:\",sessionId);const response=await fetch(`${API_URL}/status`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({updateSession:true,sessionId:sessionId,question:question,answer:answer})});const data=await response.json();console.log(\"会话更新响应:\",data);console.log(\"流式处理后会话已更新\");return true;}catch(error){console.error(\"更新流式处理后会话失败:\",error);return false;}},[]);// 轮询结果\nconst pollForResult=useCallback(async function(requestId){let attempts=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;try{// 超出最大尝试次数时停止\nif(attempts>=MAX_POLL_ATTEMPTS){console.log(`达到最大轮询次数${MAX_POLL_ATTEMPTS}`);return{status:\"timeout\",requestId:requestId,message:\"处理时间较长，请稍后检查结果。\"};}console.log(`正在轮询请求ID: ${requestId}, 会话ID: ${sessionId}, 尝试次数: ${attempts+1}`);let response;try{// 使用POST请求进行轮询\nresponse=await fetch(`${API_URL}/status`,{method:'POST',headers:{'Content-Type':'application/json','Cache-Control':'no-cache'},body:JSON.stringify({requestId:requestId,sessionId:sessionId})});console.log(`轮询响应状态码: ${response.status}`);}catch(fetchError){console.error(`轮询请求失败: ${fetchError.message}`);// 如果POST失败，尝试使用GET作为备选方案\nconsole.log(\"尝试使用GET请求作为备选方案...\");response=await fetch(`${API_URL}/status?requestId=${encodeURIComponent(requestId)}&sessionId=${encodeURIComponent(sessionId)}`,{method:'GET',headers:{'Accept':'application/json','Cache-Control':'no-cache'}});console.log(`备选GET请求响应状态码: ${response.status}`);}if(!response.ok){throw new Error(`服务器返回错误: ${response.status}`);}const result=await response.json();console.log(\"轮询结果:\",result);// 检查状态并处理\nif(result.status==='completed'&&result.answer){console.log(\"收到回答:\",result.answer.substring(0,50)+\"...\");return result;}else if(result.status==='failed'){console.error(\"请求失败:\",result.error);return{status:\"error\",error:result.error||\"处理请求时出错\"};}else{// 继续轮询\nconsole.log(`状态: ${result.status}，等待${POLL_INTERVAL}ms后重试`);await new Promise(resolve=>setTimeout(resolve,POLL_INTERVAL));return pollForResult(requestId,attempts+1);}}catch(error){console.error(\"轮询错误:\",error);// 轮询出错后短暂等待然后重试\nif(attempts<MAX_POLL_ATTEMPTS-1){console.log(`轮询出错，${POLL_INTERVAL}ms后重试...`);await new Promise(resolve=>setTimeout(resolve,POLL_INTERVAL));return pollForResult(requestId,attempts+1);}return{status:\"error\",error:error.message||\"轮询过程中遇到错误\"};}},[sessionId]);// 检查特定请求的答案\nconst checkAnswer=useCallback(async requestId=>{if(!requestId)return null;try{const result=await pollForResult(requestId,0);return result;}catch(error){console.error(\"检查答案失败:\",error);return{status:\"error\",error:`检查失败: ${error.message}`};}},[pollForResult]);return{initiateRequest,handleStreamingResponse,pollForResult,checkAnswer,isProcessing,setIsProcessing,streamFailureCount};}export default useChatApi;","map":{"version":3,"names":["useState","useCallback","getApiUrl","GREETING_CACHE","POLL_INTERVAL","MAX_POLL_ATTEMPTS","API_URL","hashString","str","hash","i","length","charCodeAt","useChatApi","sessionId","setSessionId","isProcessing","setIsProcessing","pendingRequests","Map","streamFailureCount","setStreamFailureCount","initiateRequest","question","useStream","arguments","undefined","questionHash","has","console","log","inProgress","set","isSimpleQuestion","includes","normalizedQuestion","toLowerCase","trim","directAnswer","answer","retries","maxRetries","lastError","response","fetch","method","headers","body","JSON","stringify","preferFastResponse","stream","ok","errorText","text","Error","status","data","json","Object","keys","streamConfig","requestId","quickResponse","fallbackToStandard","error","warn","message","delay","Math","pow","Promise","resolve","setTimeout","delete","handleStreamingResponse","onMessageUpdate","_streamConfig$message","_streamConfig$message2","apiEndpoint","model","apiKey","endpoint","messageCount","messages","requestBody","role","content","temperature","parameters","max_tokens","top_p","options","reader","getReader","decoder","TextDecoder","fullResponse","done","value","read","chunk","decode","lines","split","line","startsWith","slice","parsed","parse","choices","delta","parseError","userQuestion","find","m","updateSessionAfterStreaming","prev","updateSession","pollForResult","attempts","fetchError","encodeURIComponent","result","substring","checkAnswer"],"sources":["/Users/depblu/Documents/GitHub/JasonDepblu.github.io/src/hooks/useChatApi.js"],"sourcesContent":["// src/hooks/useChatApi.js\nimport { useState, useCallback } from 'react';\nimport { getApiUrl } from '../utils/apiConfig';\nimport { GREETING_CACHE } from '../utils/greetingCache';\n\n// 轮询间隔和最大尝试次数\nconst POLL_INTERVAL = 5000;\nconst MAX_POLL_ATTEMPTS = 60;\n\nconst API_URL = getApiUrl();\n\n// 简单的哈希函数，用于识别重复问题\nfunction hashString(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = ((hash << 5) - hash) + str.charCodeAt(i);\n    hash |= 0; // 转换为32位整数\n  }\n  return hash;\n}\n\nfunction useChatApi(sessionId, setSessionId) {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [pendingRequests] = useState(new Map());\n  const [streamFailureCount, setStreamFailureCount] = useState(0);\n\n  // 发起初始请求，获取requestId或直接获取答案\n  const initiateRequest = useCallback(async (question, useStream = false) => {\n    try {\n      // 创建问题的哈希值以识别重复请求\n      const questionHash = hashString(question);\n\n      // 检查是否已经在处理这个问题\n      if (pendingRequests.has(questionHash)) {\n        console.log(\"这个问题的请求已在进行中\");\n        return { inProgress: true };\n      }\n\n      // 添加到待处理请求\n      pendingRequests.set(questionHash, true);\n\n      try {\n        // 判断是否是简单问题\n        const isSimpleQuestion = question.length < 50 &&\n                                !question.includes(\"如何\") &&\n                                !question.includes(\"为什么\") &&\n                                !question.includes(\"比较\");\n\n        const normalizedQuestion = question.toLowerCase().trim();\n\n        // 检查是否是简单问候语\n        if (GREETING_CACHE[normalizedQuestion] && !useStream) {\n          return {\n            directAnswer: true,\n            answer: GREETING_CACHE[normalizedQuestion]\n          };\n        }\n\n        let retries = 0;\n        const maxRetries = 3;\n        let lastError = null;\n\n        while (retries < maxRetries) {\n          try {\n            const response = await fetch(`${API_URL}/rag`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache'\n              },\n              body: JSON.stringify({\n                question,\n                sessionId: sessionId,\n                preferFastResponse: isSimpleQuestion && !useStream,\n                stream: useStream\n              })\n            });\n\n            if (!response.ok) {\n              const errorText = await response.text();\n              throw new Error(`服务器错误 (${response.status}): ${errorText}`);\n            }\n\n            const data = await response.json();\n            console.log(\"API响应收到:\", Object.keys(data));\n\n            if (data.sessionId) {\n              setSessionId(data.sessionId);\n            }\n\n            if (data.answer) {\n              console.log(\"收到后端直接回答\");\n              return {\n                directAnswer: true,\n                answer: data.answer\n              };\n            }\n\n            if (data.streamConfig) {\n              console.log(\"收到流式配置\");\n              return {\n                directAnswer: false,\n                streamConfig: data.streamConfig,\n                requestId: data.requestId\n              };\n            }\n\n            if (data.quickResponse) {\n              console.log(\"收到快速响应\");\n              return {\n                directAnswer: false,\n                quickResponse: data.quickResponse,\n                requestId: data.requestId\n              };\n            }\n\n            if (data.fallbackToStandard) {\n              console.log(\"不支持流式响应，回退到标准处理\");\n              return initiateRequest(question, false);\n            }\n\n            return {\n              directAnswer: false,\n              requestId: data.requestId\n            };\n          } catch (error) {\n            lastError = error;\n            retries++;\n            console.warn(`请求尝试${retries}失败: ${error.message}`);\n\n            if (retries < maxRetries) {\n              const delay = Math.pow(2, retries) * 1000;\n              console.log(`${delay}ms后重试...`);\n              await new Promise(resolve => setTimeout(resolve, delay));\n            }\n          }\n        }\n\n        throw lastError || new Error('所有请求尝试均失败');\n      } finally {\n        // 处理完毕后从待处理请求中移除\n        pendingRequests.delete(questionHash);\n      }\n    } catch (error) {\n      console.error('初始化请求失败:', error);\n      throw error;\n    }\n  }, [pendingRequests, sessionId, setSessionId]);\n\n  // 处理流式响应\n  const handleStreamingResponse = useCallback(async (streamConfig, onMessageUpdate) => {\n    try {\n      console.log(\"设置流式连接...\");\n\n      // 验证流式配置\n      if (!streamConfig || !streamConfig.apiEndpoint || !streamConfig.model || !streamConfig.apiKey) {\n        console.error(\"无效的流式配置:\", JSON.stringify({\n          ...streamConfig,\n          apiKey: streamConfig && streamConfig.apiKey ? \"[REDACTED]\" : undefined\n        }, null, 2));\n        throw new Error(\"流式配置无效，无法建立连接\");\n      }\n\n      // 调试信息\n      console.log(\"流式配置详情:\", {\n        endpoint: streamConfig.apiEndpoint,\n        model: streamConfig.model,\n        messageCount: streamConfig.messages?.length || 0\n      });\n\n      // 创建请求体\n      const requestBody = {\n        model: streamConfig.model,\n        messages: streamConfig.messages || [{ role: \"user\", content: \"请提供回答\" }],\n        stream: true,\n        temperature: streamConfig.parameters.temperature,\n        max_tokens: streamConfig.parameters.max_tokens,\n        top_p: streamConfig.parameters.top_p\n      };\n\n      // 创建fetch选项\n      const options = {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${streamConfig.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      };\n\n      // 发送请求\n      console.log(\"发送流式请求到:\", streamConfig.apiEndpoint);\n      const response = await fetch(streamConfig.apiEndpoint, options);\n\n      // 检查响应状态\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"流式API错误响应:\", errorText);\n        throw new Error(`API返回错误状态: ${response.status}`);\n      }\n\n      console.log(\"流式连接已建立，开始读取...\");\n\n      // 设置流式读取器\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let fullResponse = '';\n\n      // 处理流式数据\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          console.log(\"流式传输完成\");\n          break;\n        }\n\n        // 解码数据块\n        const chunk = decoder.decode(value);\n        console.log(\"接收到数据块，大小:\", chunk.length);\n\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data:')) {\n            const data = line.slice(5).trim();\n\n            if (data === '[DONE]') {\n              continue;\n            }\n\n            try {\n              const parsed = JSON.parse(data);\n              if (parsed.choices && parsed.choices[0].delta && parsed.choices[0].delta.content) {\n                const content = parsed.choices[0].delta.content;\n                fullResponse += content;\n\n                // 更新UI\n                onMessageUpdate(fullResponse);\n              }\n            } catch (parseError) {\n              console.warn(\"无法解析流式数据块:\", parseError.message);\n            }\n          }\n        }\n      }\n\n      console.log(\"流式处理成功完成\");\n\n      // 更新会话历史\n      const userQuestion = streamConfig.messages.find(m => m.role === 'user')?.content || '';\n      await updateSessionAfterStreaming(sessionId, userQuestion, fullResponse);\n\n      // 成功时重置失败计数\n      setStreamFailureCount(0);\n\n      return fullResponse;\n    } catch (error) {\n      console.error(\"流式处理错误:\", error);\n\n      // 增加失败计数\n      setStreamFailureCount(prev => prev + 1);\n\n      // 返回false表示失败，触发回退处理\n      return false;\n    }\n  }, [sessionId]);\n\n  // 更新流式处理后的会话\n  const updateSessionAfterStreaming = useCallback(async (sessionId, question, answer) => {\n    try {\n      console.log(\"更新流式处理后的会话:\", sessionId);\n\n      const response = await fetch(`${API_URL}/status`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          updateSession: true,\n          sessionId: sessionId,\n          question: question,\n          answer: answer\n        })\n      });\n\n      const data = await response.json();\n      console.log(\"会话更新响应:\", data);\n\n      console.log(\"流式处理后会话已更新\");\n      return true;\n    } catch (error) {\n      console.error(\"更新流式处理后会话失败:\", error);\n      return false;\n    }\n  }, []);\n\n  // 轮询结果\n  const pollForResult = useCallback(async (requestId, attempts = 0) => {\n    try {\n      // 超出最大尝试次数时停止\n      if (attempts >= MAX_POLL_ATTEMPTS) {\n        console.log(`达到最大轮询次数${MAX_POLL_ATTEMPTS}`);\n        return {\n          status: \"timeout\",\n          requestId: requestId,\n          message: \"处理时间较长，请稍后检查结果。\"\n        };\n      }\n\n      console.log(`正在轮询请求ID: ${requestId}, 会话ID: ${sessionId}, 尝试次数: ${attempts + 1}`);\n\n      let response;\n\n      try {\n        // 使用POST请求进行轮询\n        response = await fetch(`${API_URL}/status`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Cache-Control': 'no-cache'\n          },\n          body: JSON.stringify({\n            requestId: requestId,\n            sessionId: sessionId\n          })\n        });\n\n        console.log(`轮询响应状态码: ${response.status}`);\n      } catch (fetchError) {\n        console.error(`轮询请求失败: ${fetchError.message}`);\n\n        // 如果POST失败，尝试使用GET作为备选方案\n        console.log(\"尝试使用GET请求作为备选方案...\");\n        response = await fetch(`${API_URL}/status?requestId=${encodeURIComponent(requestId)}&sessionId=${encodeURIComponent(sessionId)}`, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Cache-Control': 'no-cache'\n          }\n        });\n\n        console.log(`备选GET请求响应状态码: ${response.status}`);\n      }\n\n      if (!response.ok) {\n        throw new Error(`服务器返回错误: ${response.status}`);\n      }\n\n      const result = await response.json();\n      console.log(\"轮询结果:\", result);\n\n      // 检查状态并处理\n      if (result.status === 'completed' && result.answer) {\n        console.log(\"收到回答:\", result.answer.substring(0, 50) + \"...\");\n        return result;\n      } else if (result.status === 'failed') {\n        console.error(\"请求失败:\", result.error);\n        return {\n          status: \"error\",\n          error: result.error || \"处理请求时出错\"\n        };\n      } else {\n        // 继续轮询\n        console.log(`状态: ${result.status}，等待${POLL_INTERVAL}ms后重试`);\n        await new Promise(resolve => setTimeout(resolve, POLL_INTERVAL));\n        return pollForResult(requestId, attempts + 1);\n      }\n    } catch (error) {\n      console.error(\"轮询错误:\", error);\n\n      // 轮询出错后短暂等待然后重试\n      if (attempts < MAX_POLL_ATTEMPTS - 1) {\n        console.log(`轮询出错，${POLL_INTERVAL}ms后重试...`);\n        await new Promise(resolve => setTimeout(resolve, POLL_INTERVAL));\n        return pollForResult(requestId, attempts + 1);\n      }\n\n      return {\n        status: \"error\",\n        error: error.message || \"轮询过程中遇到错误\"\n      };\n    }\n  }, [sessionId]);\n\n  // 检查特定请求的答案\n  const checkAnswer = useCallback(async (requestId) => {\n    if (!requestId) return null;\n\n    try {\n      const result = await pollForResult(requestId, 0);\n      return result;\n    } catch (error) {\n      console.error(\"检查答案失败:\", error);\n      return {\n        status: \"error\",\n        error: `检查失败: ${error.message}`\n      };\n    }\n  }, [pollForResult]);\n\n  return {\n    initiateRequest,\n    handleStreamingResponse,\n    pollForResult,\n    checkAnswer,\n    isProcessing,\n    setIsProcessing,\n    streamFailureCount\n  };\n}\n\nexport default useChatApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}