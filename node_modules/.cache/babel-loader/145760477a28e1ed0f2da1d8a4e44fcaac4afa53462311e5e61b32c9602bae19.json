{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import MessageList from'./MessageList';import ChatInput from'./ChatInput';import StreamToggle from'./StreamToggle';import useLocalStorage from'../hooks/useLocalStorage';import useChatApi from'../hooks/useChatApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatBot(){// 状态管理\nconst[messages,setMessages]=useState([]);const[sessionId,setSessionId]=useLocalStorage('chatSessionId',null);const[useStream,setUseStream]=useState(true);const[thinking,setThinking]=useState(null);const[isProcessing,setIsProcessing]=useState(false);// 使用自定义Hook进行API通信\nconst{initiateRequest,handleStreamingResponse,pollForResult,checkAnswer,streamFailureCount}=useChatApi(sessionId,setSessionId);// 处理流式响应失败时的UI反馈\nuseEffect(()=>{if(streamFailureCount>=3&&useStream){setUseStream(false);addMessage('ai','已自动关闭流式响应模式，因为检测到多次连接失败。',false,true);}},[streamFailureCount,useStream]);// 添加消息到聊天记录\nconst addMessage=useCallback(function(type,content){let isStreaming=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let error=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;setMessages(prev=>[...prev,{type,content,isStreaming,error}]);},[]);// 更新流式消息内容\nconst updateStreamMessage=useCallback(content=>{setMessages(prev=>{const newMessages=[...prev];const lastIndex=newMessages.length-1;if(lastIndex>=0&&newMessages[lastIndex].isStreaming){newMessages[lastIndex]={...newMessages[lastIndex],content};}return newMessages;});},[]);// 检查特定请求的结果\nconst handleCheckAnswer=useCallback(async requestId=>{const thinkingId='checking-'+Date.now();setThinking({id:thinkingId,text:'检查结果中'});setIsProcessing(true);try{const result=await checkAnswer(requestId);setThinking(null);handleResult(result);}catch(error){setThinking(null);addMessage('ai',`检查失败: ${error.message}`,false,true);}finally{setIsProcessing(false);}},[addMessage,checkAnswer]);// 处理API结果\nconst handleResult=useCallback(result=>{if(result.status===\"timeout\"){// 超时但仍在处理\naddMessage('ai',`${result.message} <button onClick={() => window.checkAnswer('${result.requestId}')}>检查是否已完成</button>`,false,false);return;}if(result.answer){// 更新会话ID\nif(result.sessionId){setSessionId(result.sessionId);}// 渲染回答\naddMessage('ai',result.answer);}else if(result.status===\"error\"){// 处理错误\naddMessage('ai',result.error||'处理完成，但没有获得回答',false,true);}else{// 没有回答\naddMessage('ai','处理完成，但没有获得回答',false,true);}},[addMessage,setSessionId]);// 处理用户发送的消息\nconst handleSendMessage=useCallback(async question=>{if(!question.trim())return;// 禁用输入，显示处理状态\nsetIsProcessing(true);// 添加用户消息到UI\naddMessage('user',question);// 添加\"思考中\"的提示\nconst thinkingId='thinking-'+Date.now();setThinking({id:thinkingId,attempts:0});try{// 调用API获取请求ID或直接获取答案\nconst result=await initiateRequest(question,useStream);// 如果收到直接答案\nif(result.directAnswer){setThinking(null);addMessage('ai',result.answer);setIsProcessing(false);return;}// 如果收到流式配置\nif(result.streamConfig){// 移除思考中状态\nsetThinking(null);// 添加一个空的流式消息容器\naddMessage('ai','',true);// 处理流式响应\nconst streamResult=await handleStreamingResponse(result.streamConfig,updateStreamMessage);if(streamResult===false){// 流式处理失败，更新最后一条消息为错误\nsetMessages(prev=>{const newMessages=[...prev];const lastIndex=newMessages.length-1;if(lastIndex>=0&&newMessages[lastIndex].isStreaming){// 移除流式状态，标记为错误\nnewMessages[lastIndex]={...newMessages[lastIndex],isStreaming:false,error:true,content:'流式响应出错，正在切换到标准模式...'};}return newMessages;});// 回退到标准处理\nconst standardResult=await initiateRequest(question,false);if(!standardResult.directAnswer){// 重新添加思考中状态\nsetThinking({id:thinkingId,attempts:0});// 启动常规轮询\nconst pollResult=await pollForResult(standardResult.requestId);setThinking(null);handleResult(pollResult);}else{// 直接显示标准答案\naddMessage('ai',standardResult.answer);}}else{// 流式处理成功，更新最后一条消息，移除流式状态\nsetMessages(prev=>{const newMessages=[...prev];const lastIndex=newMessages.length-1;if(lastIndex>=0&&newMessages[lastIndex].isStreaming){newMessages[lastIndex]={...newMessages[lastIndex],isStreaming:false};}return newMessages;});}setIsProcessing(false);return;}// 如果收到了快速响应，先显示它\nif(result.quickResponse){// 更新思考中状态以显示快速响应\nsetThinking({id:thinkingId,text:result.quickResponse});}// 开始轮询检查结果\nconst pollResult=await pollForResult(result.requestId);// 移除思考中状态\nsetThinking(null);// 根据结果更新UI\nhandleResult(pollResult);}catch(err){// 移除思考中状态\nsetThinking(null);console.error('处理失败:',err);addMessage('ai',`获取回答失败: ${err.message}`,false,true);}finally{// 恢复输入状态\nsetIsProcessing(false);}},[addMessage,handleResult,handleStreamingResponse,initiateRequest,pollForResult,updateStreamMessage,useStream]);// 清除会话\nconst handleClearSession=useCallback(()=>{if(window.confirm('确定要开始新的对话吗？这将清除当前的对话历史。')){localStorage.removeItem('chatSessionId');setSessionId(null);setMessages([]);addMessage('ai','已开始新的对话。');}},[addMessage,setSessionId]);// 切换流式响应模式\nconst handleToggleStream=useCallback(e=>{setUseStream(e.target.checked);},[]);// 公开checkAnswer方法给window对象，以便按钮onclick能正常工作\nuseEffect(()=>{window.checkAnswer=handleCheckAnswer;return()=>{delete window.checkAnswer;};},[handleCheckAnswer]);return/*#__PURE__*/_jsxs(\"div\",{id:\"chat-container\",children:[/*#__PURE__*/_jsx(MessageList,{messages:messages,thinking:thinking}),/*#__PURE__*/_jsx(ChatInput,{onSendMessage:handleSendMessage,disabled:isProcessing}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(StreamToggle,{checked:useStream,onChange:handleToggleStream}),/*#__PURE__*/_jsx(\"button\",{id:\"clear-session\",onClick:handleClearSession,title:\"\\u5F00\\u59CB\\u65B0\\u7684\\u5BF9\\u8BDD\\uFF0C\\u6E05\\u9664\\u5BF9\\u8BDD\\u5386\\u53F2\",children:\"\\u65B0\\u5BF9\\u8BDD\"})]})]});}export default ChatBot;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MessageList","ChatInput","StreamToggle","useLocalStorage","useChatApi","jsx","_jsx","jsxs","_jsxs","ChatBot","messages","setMessages","sessionId","setSessionId","useStream","setUseStream","thinking","setThinking","isProcessing","setIsProcessing","initiateRequest","handleStreamingResponse","pollForResult","checkAnswer","streamFailureCount","addMessage","type","content","isStreaming","arguments","length","undefined","error","prev","updateStreamMessage","newMessages","lastIndex","handleCheckAnswer","requestId","thinkingId","Date","now","id","text","result","handleResult","message","status","answer","handleSendMessage","question","trim","attempts","directAnswer","streamConfig","streamResult","standardResult","pollResult","quickResponse","err","console","handleClearSession","window","confirm","localStorage","removeItem","handleToggleStream","e","target","checked","children","onSendMessage","disabled","className","onChange","onClick","title"],"sources":["/Users/depblu/Documents/GitHub/JasonDepblu.github.io/src/components/ChatBot.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport MessageList from './MessageList';\nimport ChatInput from './ChatInput';\nimport StreamToggle from './StreamToggle';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport useChatApi from '../hooks/useChatApi';\n\nfunction ChatBot() {\n  // 状态管理\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useLocalStorage('chatSessionId', null);\n  const [useStream, setUseStream] = useState(true);\n  const [thinking, setThinking] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 使用自定义Hook进行API通信\n  const {\n    initiateRequest,\n    handleStreamingResponse,\n    pollForResult,\n    checkAnswer,\n    streamFailureCount\n  } = useChatApi(sessionId, setSessionId);\n\n  // 处理流式响应失败时的UI反馈\n  useEffect(() => {\n    if (streamFailureCount >= 3 && useStream) {\n      setUseStream(false);\n      addMessage('ai', '已自动关闭流式响应模式，因为检测到多次连接失败。', false, true);\n    }\n  }, [streamFailureCount, useStream]);\n\n  // 添加消息到聊天记录\n  const addMessage = useCallback((type, content, isStreaming = false, error = false) => {\n    setMessages(prev => [...prev, { type, content, isStreaming, error }]);\n  }, []);\n\n  // 更新流式消息内容\n  const updateStreamMessage = useCallback((content) => {\n    setMessages(prev => {\n      const newMessages = [...prev];\n      const lastIndex = newMessages.length - 1;\n\n      if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n        newMessages[lastIndex] = {\n          ...newMessages[lastIndex],\n          content\n        };\n      }\n\n      return newMessages;\n    });\n  }, []);\n\n  // 检查特定请求的结果\n  const handleCheckAnswer = useCallback(async (requestId) => {\n    const thinkingId = 'checking-' + Date.now();\n    setThinking({\n      id: thinkingId,\n      text: '检查结果中'\n    });\n    setIsProcessing(true);\n\n    try {\n      const result = await checkAnswer(requestId);\n      setThinking(null);\n      handleResult(result);\n    } catch (error) {\n      setThinking(null);\n      addMessage('ai', `检查失败: ${error.message}`, false, true);\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [addMessage, checkAnswer]);\n\n  // 处理API结果\n  const handleResult = useCallback((result) => {\n    if (result.status === \"timeout\") {\n      // 超时但仍在处理\n      addMessage('ai', `${result.message} <button onClick={() => window.checkAnswer('${result.requestId}')}>检查是否已完成</button>`, false, false);\n      return;\n    }\n\n    if (result.answer) {\n      // 更新会话ID\n      if (result.sessionId) {\n        setSessionId(result.sessionId);\n      }\n\n      // 渲染回答\n      addMessage('ai', result.answer);\n    } else if (result.status === \"error\") {\n      // 处理错误\n      addMessage('ai', result.error || '处理完成，但没有获得回答', false, true);\n    } else {\n      // 没有回答\n      addMessage('ai', '处理完成，但没有获得回答', false, true);\n    }\n  }, [addMessage, setSessionId]);\n\n  // 处理用户发送的消息\n  const handleSendMessage = useCallback(async (question) => {\n    if (!question.trim()) return;\n\n    // 禁用输入，显示处理状态\n    setIsProcessing(true);\n\n    // 添加用户消息到UI\n    addMessage('user', question);\n\n    // 添加\"思考中\"的提示\n    const thinkingId = 'thinking-' + Date.now();\n    setThinking({\n      id: thinkingId,\n      attempts: 0\n    });\n\n    try {\n      // 调用API获取请求ID或直接获取答案\n      const result = await initiateRequest(question, useStream);\n\n      // 如果收到直接答案\n      if (result.directAnswer) {\n        setThinking(null);\n        addMessage('ai', result.answer);\n        setIsProcessing(false);\n        return;\n      }\n\n      // 如果收到流式配置\n      if (result.streamConfig) {\n        // 移除思考中状态\n        setThinking(null);\n\n        // 添加一个空的流式消息容器\n        addMessage('ai', '', true);\n\n        // 处理流式响应\n        const streamResult = await handleStreamingResponse(\n          result.streamConfig,\n          updateStreamMessage\n        );\n\n        if (streamResult === false) {\n          // 流式处理失败，更新最后一条消息为错误\n          setMessages(prev => {\n            const newMessages = [...prev];\n            const lastIndex = newMessages.length - 1;\n\n            if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n              // 移除流式状态，标记为错误\n              newMessages[lastIndex] = {\n                ...newMessages[lastIndex],\n                isStreaming: false,\n                error: true,\n                content: '流式响应出错，正在切换到标准模式...'\n              };\n            }\n\n            return newMessages;\n          });\n\n          // 回退到标准处理\n          const standardResult = await initiateRequest(question, false);\n\n          if (!standardResult.directAnswer) {\n            // 重新添加思考中状态\n            setThinking({\n              id: thinkingId,\n              attempts: 0\n            });\n\n            // 启动常规轮询\n            const pollResult = await pollForResult(standardResult.requestId);\n            setThinking(null);\n            handleResult(pollResult);\n          } else {\n            // 直接显示标准答案\n            addMessage('ai', standardResult.answer);\n          }\n        } else {\n          // 流式处理成功，更新最后一条消息，移除流式状态\n          setMessages(prev => {\n            const newMessages = [...prev];\n            const lastIndex = newMessages.length - 1;\n\n            if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n              newMessages[lastIndex] = {\n                ...newMessages[lastIndex],\n                isStreaming: false\n              };\n            }\n\n            return newMessages;\n          });\n        }\n\n        setIsProcessing(false);\n        return;\n      }\n\n      // 如果收到了快速响应，先显示它\n      if (result.quickResponse) {\n        // 更新思考中状态以显示快速响应\n        setThinking({\n          id: thinkingId,\n          text: result.quickResponse\n        });\n      }\n\n      // 开始轮询检查结果\n      const pollResult = await pollForResult(result.requestId);\n\n      // 移除思考中状态\n      setThinking(null);\n\n      // 根据结果更新UI\n      handleResult(pollResult);\n    } catch (err) {\n      // 移除思考中状态\n      setThinking(null);\n      console.error('处理失败:', err);\n      addMessage('ai', `获取回答失败: ${err.message}`, false, true);\n    } finally {\n      // 恢复输入状态\n      setIsProcessing(false);\n    }\n  }, [\n    addMessage,\n    handleResult,\n    handleStreamingResponse,\n    initiateRequest,\n    pollForResult,\n    updateStreamMessage,\n    useStream\n  ]);\n\n  // 清除会话\n  const handleClearSession = useCallback(() => {\n    if (window.confirm('确定要开始新的对话吗？这将清除当前的对话历史。')) {\n      localStorage.removeItem('chatSessionId');\n      setSessionId(null);\n      setMessages([]);\n      addMessage('ai', '已开始新的对话。');\n    }\n  }, [addMessage, setSessionId]);\n\n  // 切换流式响应模式\n  const handleToggleStream = useCallback((e) => {\n    setUseStream(e.target.checked);\n  }, []);\n\n  // 公开checkAnswer方法给window对象，以便按钮onclick能正常工作\n  useEffect(() => {\n    window.checkAnswer = handleCheckAnswer;\n\n    return () => {\n      delete window.checkAnswer;\n    };\n  }, [handleCheckAnswer]);\n\n  return (\n\n    <div id=\"chat-container\">\n\n      <MessageList messages={messages} thinking={thinking} />\n\n      <ChatInput\n        onSendMessage={handleSendMessage}\n        disabled={isProcessing}\n      />\n\n      <div className=\"controls\">\n        <StreamToggle\n          checked={useStream}\n          onChange={handleToggleStream}\n        />\n\n        <button\n          id=\"clear-session\"\n          onClick={handleClearSession}\n          title=\"开始新的对话，清除对话历史\"\n        >\n          新对话\n        </button>\n      </div>\n    </div>\n\n  );\n}\n\nexport default ChatBot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}