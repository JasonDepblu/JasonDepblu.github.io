{"ast":null,"code":"// src/hooks/useChatApi.js\nimport{useState,useCallback,useEffect}from'react';import{getApiUrl}from'../utils/apiConfig';import{GREETING_CACHE}from'../utils/greetingCache';// 轮询间隔和最大尝试次数\nconst POLL_INTERVAL=5000;const MAX_POLL_ATTEMPTS=60;const API_URL=getApiUrl();// 辅助函数：带超时的 fetch\nconst fetchWithTimeout=async function(url,options){let timeoutMs=arguments.length>2&&arguments[2]!==undefined?arguments[2]:30000;const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),timeoutMs);try{const response=await fetch(url,{...options,signal:controller.signal});clearTimeout(timeoutId);return response;}catch(error){clearTimeout(timeoutId);if(error.name==='AbortError'){throw new Error(`请求超时 (${timeoutMs}ms)`);}throw error;}};// 简单的哈希函数，用于识别重复问题\nfunction hashString(str){let hash=0;for(let i=0;i<str.length;i++){hash=(hash<<5)-hash+str.charCodeAt(i);hash|=0;// 转换为32位整数\n}return hash;}function useChatApi(sessionId,setSessionId){const[isProcessing,setIsProcessing]=useState(false);const[pendingRequests]=useState(new Map());const[streamFailureCount,setStreamFailureCount]=useState(0);// 监控流式失败计数并处理\nuseEffect(()=>{// 如果流式传输多次失败，暂时禁用它\nif(streamFailureCount>3){console.log(\"流式传输多次失败，暂时禁用流式模式\");localStorage.setItem(\"disableStreaming\",\"true\");// 5分钟后重置\nsetTimeout(()=>{localStorage.removeItem(\"disableStreaming\");setStreamFailureCount(0);},5*60*1000);}},[streamFailureCount]);// 发起初始请求，获取requestId或直接获取答案\nconst initiateRequest=useCallback(async function(question){let useStream=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;console.log(`发起请求: sessionId=${sessionId}, useStream=${useStream}, 问题长度=${question.length}`);// 检查是否暂时禁用流式传输\nconst shouldDisableStreaming=localStorage.getItem(\"disableStreaming\")===\"true\";if(shouldDisableStreaming&&useStream){console.log(\"由于之前的失败，流式传输已暂时禁用\");useStream=false;}try{// 创建问题的哈希值以识别重复请求\nconst questionHash=hashString(question);// 检查是否已经在处理这个问题\nif(pendingRequests.has(questionHash)){console.log(\"这个问题的请求已在进行中\");return{inProgress:true};}// 添加到待处理请求\npendingRequests.set(questionHash,true);try{// 判断是否是简单问题\nconst isSimpleQuestion=question.length<50&&!question.includes(\"如何\")&&!question.includes(\"为什么\")&&!question.includes(\"比较\");const normalizedQuestion=question.toLowerCase().trim();// 检查是否是简单问候语\nif(GREETING_CACHE[normalizedQuestion]&&!useStream){return{directAnswer:true,answer:GREETING_CACHE[normalizedQuestion]};}let retries=0;const maxRetries=3;let lastError=null;while(retries<maxRetries){try{console.log(`尝试请求 ${retries+1}/${maxRetries}...`);const response=await fetchWithTimeout(`${API_URL}/rag`,{method:'POST',headers:{'Content-Type':'application/json','Cache-Control':'no-cache'},body:JSON.stringify({question,sessionId:sessionId,preferFastResponse:isSimpleQuestion&&!useStream,stream:useStream})},30000);// 30秒超时\nif(!response.ok){const errorText=await response.text();throw new Error(`服务器错误 (${response.status}): ${errorText}`);}const data=await response.json();console.log(\"API响应收到:\",Object.keys(data));if(data.sessionId){console.log(`更新会话ID: ${data.sessionId}`);setSessionId(data.sessionId);}if(data.answer){console.log(\"收到后端直接回答\");return{directAnswer:true,answer:data.answer};}if(data.streamConfig){console.log(\"收到流式配置:\",{hasEndpoint:!!data.streamConfig.apiEndpoint,hasApiKey:!!data.streamConfig.apiKey,model:data.streamConfig.model});return{directAnswer:false,streamConfig:data.streamConfig,requestId:data.requestId};}if(data.quickResponse){console.log(\"收到快速响应\");return{directAnswer:false,quickResponse:data.quickResponse,requestId:data.requestId};}if(data.fallbackToStandard){console.log(\"不支持流式响应，回退到标准处理\");return initiateRequest(question,false);}console.log(`收到请求ID: ${data.requestId}`);return{directAnswer:false,requestId:data.requestId,sessionId:data.sessionId||sessionId};}catch(error){lastError=error;retries++;console.warn(`请求尝试${retries}失败: ${error.message}`);if(retries<maxRetries){const delay=Math.pow(2,retries)*1000;console.log(`${delay}ms后重试...`);await new Promise(resolve=>setTimeout(resolve,delay));}}}throw lastError||new Error('所有请求尝试均失败');}finally{// 处理完毕后从待处理请求中移除\npendingRequests.delete(questionHash);}}catch(error){console.error('初始化请求失败:',error);throw error;}},[pendingRequests,sessionId,setSessionId]);// 处理流式响应\nconst handleStreamingResponse=useCallback(async(streamConfig,onMessageUpdate)=>{try{var _streamConfig$message,_streamConfig$paramet,_streamConfig$paramet2,_streamConfig$paramet3,_streamConfig$message2;console.log(\"设置流式连接...\");// 验证流式配置\nif(!streamConfig||!streamConfig.apiEndpoint||!streamConfig.model||!streamConfig.apiKey){console.error(\"无效的流式配置:\",JSON.stringify({...streamConfig,apiKey:streamConfig&&streamConfig.apiKey?\"[REDACTED]\":undefined},null,2));throw new Error(\"流式配置无效，无法建立连接\");}// 调试信息\nconsole.log(\"流式配置详情:\",{endpoint:streamConfig.apiEndpoint,model:streamConfig.model,messageCount:((_streamConfig$message=streamConfig.messages)===null||_streamConfig$message===void 0?void 0:_streamConfig$message.length)||0});// 创建请求体\nconst requestBody={model:streamConfig.model,messages:streamConfig.messages||[{role:\"user\",content:\"请提供回答\"}],stream:true,temperature:((_streamConfig$paramet=streamConfig.parameters)===null||_streamConfig$paramet===void 0?void 0:_streamConfig$paramet.temperature)||0.7,max_tokens:((_streamConfig$paramet2=streamConfig.parameters)===null||_streamConfig$paramet2===void 0?void 0:_streamConfig$paramet2.max_tokens)||2048,top_p:((_streamConfig$paramet3=streamConfig.parameters)===null||_streamConfig$paramet3===void 0?void 0:_streamConfig$paramet3.top_p)||0.9};// 创建fetch选项\nconst options={method:'POST',headers:{'Authorization':`Bearer ${streamConfig.apiKey}`,'Content-Type':'application/json'},body:JSON.stringify(requestBody)};// 发送请求\nconsole.log(\"发送流式请求到:\",streamConfig.apiEndpoint);const response=await fetchWithTimeout(streamConfig.apiEndpoint,options,60000);// 60秒超时\n// 检查响应状态\nif(!response.ok){const errorText=await response.text();console.error(\"流式API错误响应:\",errorText);throw new Error(`API返回错误状态: ${response.status}`);}console.log(\"流式连接已建立，开始读取...\");// 设置流式读取器\nconst reader=response.body.getReader();const decoder=new TextDecoder(\"utf-8\");let fullResponse='';// 处理流式数据\nwhile(true){const{done,value}=await reader.read();if(done){console.log(\"流式传输完成\");break;}// 解码数据块\nconst chunk=decoder.decode(value);console.log(\"接收到数据块，大小:\",chunk.length);const lines=chunk.split('\\n');for(const line of lines){if(line.startsWith('data:')){const data=line.slice(5).trim();if(data==='[DONE]'){continue;}try{const parsed=JSON.parse(data);if(parsed.choices&&parsed.choices[0].delta&&parsed.choices[0].delta.content){const content=parsed.choices[0].delta.content;fullResponse+=content;// 更新UI\nonMessageUpdate(fullResponse);}}catch(parseError){console.warn(\"无法解析流式数据块:\",parseError.message);}}}}console.log(\"流式处理成功完成\");// 更新会话历史\nconst userQuestion=((_streamConfig$message2=streamConfig.messages.find(m=>m.role==='user'))===null||_streamConfig$message2===void 0?void 0:_streamConfig$message2.content)||'';await updateSessionAfterStreaming(sessionId,userQuestion,fullResponse);// 成功时重置失败计数\nsetStreamFailureCount(0);return fullResponse;}catch(error){console.error(\"流式处理错误:\",error);// 增加失败计数\nsetStreamFailureCount(prev=>prev+1);// 返回false表示失败，触发回退处理\nreturn false;}},[sessionId,updateSessionAfterStreaming]);// 更新流式处理后的会话\nconst updateSessionAfterStreaming=useCallback(async(sessionId,question,answer)=>{try{console.log(\"更新流式处理后的会话:\",sessionId);const response=await fetchWithTimeout(`${API_URL}/status`,{method:'POST',headers:{'Content-Type':'application/json','Cache-Control':'no-cache'},body:JSON.stringify({updateSession:true,sessionId:sessionId,question:question,answer:answer})},15000);// 15秒超时\nconst data=await response.json();console.log(\"会话更新响应:\",data);console.log(\"流式处理后会话已更新\");return true;}catch(error){console.error(\"更新流式处理后会话失败:\",error);return false;}},[]);// 改进版的轮询函数\nconst pollForResult=useCallback(async function(requestId,sessionId){let attempts=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;// Don't attempt to poll with an invalid sessionId\nif(!sessionId||sessionId===\"null\"){console.log(\"Cannot poll without valid session ID\");return{status:\"error\",error:\"No valid session ID available\"};}console.log(`轮询中: requestId=${requestId}, sessionId=${sessionId}, attempts=${attempts}`);try{// 超出最大尝试次数时停止\nif(attempts>=MAX_POLL_ATTEMPTS){console.log(`达到最大轮询次数${MAX_POLL_ATTEMPTS}`);return{status:\"timeout\",requestId:requestId,message:\"处理时间较长，请稍后检查结果。\"};}console.log(`正在轮询请求ID: ${requestId}, 会话ID: ${sessionId}, 尝试次数: ${attempts+1}`);// 尝试不同的请求方法来提高成功率\nlet result=null;let success=false;// 方法 1: 使用 JSON 格式的 POST 请求，设置明确的 Content-Type\ntry{console.log(\"尝试方法 1: JSON POST\");const response=await fetchWithTimeout(`${API_URL}/status`,{method:'POST',headers:{'Content-Type':'application/json','Cache-Control':'no-cache'},body:JSON.stringify({requestId:requestId,sessionId:sessionId})},10000);// 10秒超时\nif(response.ok){result=await response.json();success=true;console.log(\"方法 1 成功\");}}catch(error){console.log(\"方法 1 失败:\",error.message);}// 方法 2: 使用 URLSearchParams 作为 POST 请求体\nif(!success){try{console.log(\"尝试方法 2: URLSearchParams POST\");const params=new URLSearchParams();params.append('requestId',requestId);params.append('sessionId',sessionId);const response=await fetchWithTimeout(`${API_URL}/status`,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded','Cache-Control':'no-cache'},body:params},10000);// 10秒超时\nif(response.ok){result=await response.json();success=true;console.log(\"方法 2 成功\");}}catch(error){console.log(\"方法 2 失败:\",error.message);}}// 如果所有尝试都失败\nif(!success){throw new Error(\"所有请求方法都失败\");}// 处理成功的结果\nif(result.status==='completed'&&result.answer){console.log(\"收到回答:\",result.answer.substring(0,50)+\"...\");return result;}else if(result.status==='failed'){console.error(\"请求失败:\",result.error);return{status:\"error\",error:result.error||\"处理请求时出错\"};}else{// 继续轮询\nconsole.log(`状态: ${result.status}，等待${POLL_INTERVAL}ms后重试`);await new Promise(resolve=>setTimeout(resolve,POLL_INTERVAL));// 修复：确保传递sessionId到轮询函数中\nreturn pollForResult(requestId,sessionId,attempts+1);}}catch(error){console.error(\"轮询错误:\",error);// 增加重试次数\nif(attempts<MAX_POLL_ATTEMPTS-1){console.log(`轮询出错，${POLL_INTERVAL}ms后重试...`);await new Promise(resolve=>setTimeout(resolve,POLL_INTERVAL));// 修复：确保传递sessionId到轮询函数中\nreturn pollForResult(requestId,sessionId,attempts+1);}// 如果达到最大重试次数，返回超时状态\nreturn{status:\"timeout\",requestId:requestId,message:\"处理时间较长，请稍后检查结果。\"};}},[]);// 检查特定请求的答案 - 修复为使用sessionId\nconst checkAnswer=useCallback(async requestId=>{if(!requestId)return null;try{// 修复：传递sessionId而非0\nconst result=await pollForResult(requestId,sessionId,0);return result;}catch(error){console.error(\"检查答案失败:\",error);return{status:\"error\",error:`检查失败: ${error.message}`};}},[pollForResult,sessionId]);// 添加sessionId到依赖数组\nreturn{initiateRequest,handleStreamingResponse,pollForResult,checkAnswer,isProcessing,setIsProcessing,streamFailureCount};}export default useChatApi;","map":{"version":3,"names":["useState","useCallback","useEffect","getApiUrl","GREETING_CACHE","POLL_INTERVAL","MAX_POLL_ATTEMPTS","API_URL","fetchWithTimeout","url","options","timeoutMs","arguments","length","undefined","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","error","name","Error","hashString","str","hash","i","charCodeAt","useChatApi","sessionId","setSessionId","isProcessing","setIsProcessing","pendingRequests","Map","streamFailureCount","setStreamFailureCount","console","log","localStorage","setItem","removeItem","initiateRequest","question","useStream","shouldDisableStreaming","getItem","questionHash","has","inProgress","set","isSimpleQuestion","includes","normalizedQuestion","toLowerCase","trim","directAnswer","answer","retries","maxRetries","lastError","method","headers","body","JSON","stringify","preferFastResponse","stream","ok","errorText","text","status","data","json","Object","keys","streamConfig","hasEndpoint","apiEndpoint","hasApiKey","apiKey","model","requestId","quickResponse","fallbackToStandard","warn","message","delay","Math","pow","Promise","resolve","delete","handleStreamingResponse","onMessageUpdate","_streamConfig$message","_streamConfig$paramet","_streamConfig$paramet2","_streamConfig$paramet3","_streamConfig$message2","endpoint","messageCount","messages","requestBody","role","content","temperature","parameters","max_tokens","top_p","reader","getReader","decoder","TextDecoder","fullResponse","done","value","read","chunk","decode","lines","split","line","startsWith","slice","parsed","parse","choices","delta","parseError","userQuestion","find","m","updateSessionAfterStreaming","prev","updateSession","pollForResult","attempts","result","success","params","URLSearchParams","append","substring","checkAnswer"],"sources":["/Users/depblu/Documents/GitHub/JasonDepblu.github.io/src/hooks/useChatApi.js"],"sourcesContent":["// src/hooks/useChatApi.js\nimport { useState, useCallback, useEffect } from 'react';\nimport { getApiUrl } from '../utils/apiConfig';\nimport { GREETING_CACHE } from '../utils/greetingCache';\n\n// 轮询间隔和最大尝试次数\nconst POLL_INTERVAL = 5000;\nconst MAX_POLL_ATTEMPTS = 60;\n\nconst API_URL = getApiUrl();\n\n// 辅助函数：带超时的 fetch\nconst fetchWithTimeout = async (url, options, timeoutMs = 30000) => {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\n\n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    if (error.name === 'AbortError') {\n      throw new Error(`请求超时 (${timeoutMs}ms)`);\n    }\n    throw error;\n  }\n};\n\n// 简单的哈希函数，用于识别重复问题\nfunction hashString(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = ((hash << 5) - hash) + str.charCodeAt(i);\n    hash |= 0; // 转换为32位整数\n  }\n  return hash;\n}\n\nfunction useChatApi(sessionId, setSessionId) {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [pendingRequests] = useState(new Map());\n  const [streamFailureCount, setStreamFailureCount] = useState(0);\n\n  // 监控流式失败计数并处理\n  useEffect(() => {\n    // 如果流式传输多次失败，暂时禁用它\n    if (streamFailureCount > 3) {\n      console.log(\"流式传输多次失败，暂时禁用流式模式\");\n      localStorage.setItem(\"disableStreaming\", \"true\");\n      // 5分钟后重置\n      setTimeout(() => {\n        localStorage.removeItem(\"disableStreaming\");\n        setStreamFailureCount(0);\n      }, 5 * 60 * 1000);\n    }\n  }, [streamFailureCount]);\n\n  // 发起初始请求，获取requestId或直接获取答案\n  const initiateRequest = useCallback(async (question, useStream = false) => {\n    console.log(`发起请求: sessionId=${sessionId}, useStream=${useStream}, 问题长度=${question.length}`);\n\n    // 检查是否暂时禁用流式传输\n    const shouldDisableStreaming = localStorage.getItem(\"disableStreaming\") === \"true\";\n    if (shouldDisableStreaming && useStream) {\n      console.log(\"由于之前的失败，流式传输已暂时禁用\");\n      useStream = false;\n    }\n\n    try {\n      // 创建问题的哈希值以识别重复请求\n      const questionHash = hashString(question);\n\n      // 检查是否已经在处理这个问题\n      if (pendingRequests.has(questionHash)) {\n        console.log(\"这个问题的请求已在进行中\");\n        return { inProgress: true };\n      }\n\n      // 添加到待处理请求\n      pendingRequests.set(questionHash, true);\n\n      try {\n        // 判断是否是简单问题\n        const isSimpleQuestion = question.length < 50 &&\n                                !question.includes(\"如何\") &&\n                                !question.includes(\"为什么\") &&\n                                !question.includes(\"比较\");\n\n        const normalizedQuestion = question.toLowerCase().trim();\n\n        // 检查是否是简单问候语\n        if (GREETING_CACHE[normalizedQuestion] && !useStream) {\n          return {\n            directAnswer: true,\n            answer: GREETING_CACHE[normalizedQuestion]\n          };\n        }\n\n        let retries = 0;\n        const maxRetries = 3;\n        let lastError = null;\n\n        while (retries < maxRetries) {\n          try {\n            console.log(`尝试请求 ${retries + 1}/${maxRetries}...`);\n            const response = await fetchWithTimeout(`${API_URL}/rag`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache'\n              },\n              body: JSON.stringify({\n                question,\n                sessionId: sessionId,\n                preferFastResponse: isSimpleQuestion && !useStream,\n                stream: useStream\n              })\n            }, 30000); // 30秒超时\n\n            if (!response.ok) {\n              const errorText = await response.text();\n              throw new Error(`服务器错误 (${response.status}): ${errorText}`);\n            }\n\n            const data = await response.json();\n            console.log(\"API响应收到:\", Object.keys(data));\n\n            if (data.sessionId) {\n              console.log(`更新会话ID: ${data.sessionId}`);\n              setSessionId(data.sessionId);\n            }\n\n            if (data.answer) {\n              console.log(\"收到后端直接回答\");\n              return {\n                directAnswer: true,\n                answer: data.answer\n              };\n            }\n\n            if (data.streamConfig) {\n              console.log(\"收到流式配置:\", {\n                hasEndpoint: !!data.streamConfig.apiEndpoint,\n                hasApiKey: !!data.streamConfig.apiKey,\n                model: data.streamConfig.model\n              });\n              return {\n                directAnswer: false,\n                streamConfig: data.streamConfig,\n                requestId: data.requestId\n              };\n            }\n\n            if (data.quickResponse) {\n              console.log(\"收到快速响应\");\n              return {\n                directAnswer: false,\n                quickResponse: data.quickResponse,\n                requestId: data.requestId\n              };\n            }\n\n            if (data.fallbackToStandard) {\n              console.log(\"不支持流式响应，回退到标准处理\");\n              return initiateRequest(question, false);\n            }\n\n            console.log(`收到请求ID: ${data.requestId}`);\n            return {\n              directAnswer: false,\n              requestId: data.requestId,\n              sessionId: data.sessionId || sessionId\n            };\n          } catch (error) {\n            lastError = error;\n            retries++;\n            console.warn(`请求尝试${retries}失败: ${error.message}`);\n\n            if (retries < maxRetries) {\n              const delay = Math.pow(2, retries) * 1000;\n              console.log(`${delay}ms后重试...`);\n              await new Promise(resolve => setTimeout(resolve, delay));\n            }\n          }\n        }\n\n        throw lastError || new Error('所有请求尝试均失败');\n      } finally {\n        // 处理完毕后从待处理请求中移除\n        pendingRequests.delete(questionHash);\n      }\n    } catch (error) {\n      console.error('初始化请求失败:', error);\n      throw error;\n    }\n  }, [pendingRequests, sessionId, setSessionId]);\n\n  // 处理流式响应\n  const handleStreamingResponse = useCallback(async (streamConfig, onMessageUpdate) => {\n    try {\n      console.log(\"设置流式连接...\");\n\n      // 验证流式配置\n      if (!streamConfig || !streamConfig.apiEndpoint || !streamConfig.model || !streamConfig.apiKey) {\n        console.error(\"无效的流式配置:\", JSON.stringify({\n          ...streamConfig,\n          apiKey: streamConfig && streamConfig.apiKey ? \"[REDACTED]\" : undefined\n        }, null, 2));\n        throw new Error(\"流式配置无效，无法建立连接\");\n      }\n\n      // 调试信息\n      console.log(\"流式配置详情:\", {\n        endpoint: streamConfig.apiEndpoint,\n        model: streamConfig.model,\n        messageCount: streamConfig.messages?.length || 0\n      });\n\n      // 创建请求体\n      const requestBody = {\n        model: streamConfig.model,\n        messages: streamConfig.messages || [{ role: \"user\", content: \"请提供回答\" }],\n        stream: true,\n        temperature: streamConfig.parameters?.temperature || 0.7,\n        max_tokens: streamConfig.parameters?.max_tokens || 2048,\n        top_p: streamConfig.parameters?.top_p || 0.9\n      };\n\n      // 创建fetch选项\n      const options = {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${streamConfig.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      };\n\n      // 发送请求\n      console.log(\"发送流式请求到:\", streamConfig.apiEndpoint);\n      const response = await fetchWithTimeout(streamConfig.apiEndpoint, options, 60000); // 60秒超时\n\n      // 检查响应状态\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"流式API错误响应:\", errorText);\n        throw new Error(`API返回错误状态: ${response.status}`);\n      }\n\n      console.log(\"流式连接已建立，开始读取...\");\n\n      // 设置流式读取器\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let fullResponse = '';\n\n      // 处理流式数据\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          console.log(\"流式传输完成\");\n          break;\n        }\n\n        // 解码数据块\n        const chunk = decoder.decode(value);\n        console.log(\"接收到数据块，大小:\", chunk.length);\n\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data:')) {\n            const data = line.slice(5).trim();\n\n            if (data === '[DONE]') {\n              continue;\n            }\n\n            try {\n              const parsed = JSON.parse(data);\n              if (parsed.choices && parsed.choices[0].delta && parsed.choices[0].delta.content) {\n                const content = parsed.choices[0].delta.content;\n                fullResponse += content;\n\n                // 更新UI\n                onMessageUpdate(fullResponse);\n              }\n            } catch (parseError) {\n              console.warn(\"无法解析流式数据块:\", parseError.message);\n            }\n          }\n        }\n      }\n\n      console.log(\"流式处理成功完成\");\n\n      // 更新会话历史\n      const userQuestion = streamConfig.messages.find(m => m.role === 'user')?.content || '';\n      await updateSessionAfterStreaming(sessionId, userQuestion, fullResponse);\n\n      // 成功时重置失败计数\n      setStreamFailureCount(0);\n\n      return fullResponse;\n    } catch (error) {\n      console.error(\"流式处理错误:\", error);\n\n      // 增加失败计数\n      setStreamFailureCount(prev => prev + 1);\n\n      // 返回false表示失败，触发回退处理\n      return false;\n    }\n  }, [sessionId, updateSessionAfterStreaming]);\n\n  // 更新流式处理后的会话\n  const updateSessionAfterStreaming = useCallback(async (sessionId, question, answer) => {\n    try {\n      console.log(\"更新流式处理后的会话:\", sessionId);\n\n      const response = await fetchWithTimeout(`${API_URL}/status`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        },\n        body: JSON.stringify({\n          updateSession: true,\n          sessionId: sessionId,\n          question: question,\n          answer: answer\n        })\n      }, 15000); // 15秒超时\n\n      const data = await response.json();\n      console.log(\"会话更新响应:\", data);\n\n      console.log(\"流式处理后会话已更新\");\n      return true;\n    } catch (error) {\n      console.error(\"更新流式处理后会话失败:\", error);\n      return false;\n    }\n  }, []);\n\n  // 改进版的轮询函数\n  const pollForResult = useCallback(async (requestId, sessionId, attempts = 0) => {\n    // Don't attempt to poll with an invalid sessionId\n    if (!sessionId || sessionId === \"null\") {\n      console.log(\"Cannot poll without valid session ID\");\n      return {\n        status: \"error\",\n        error: \"No valid session ID available\"\n      };\n    }\n\n    console.log(`轮询中: requestId=${requestId}, sessionId=${sessionId}, attempts=${attempts}`);\n\n    try {\n      // 超出最大尝试次数时停止\n      if (attempts >= MAX_POLL_ATTEMPTS) {\n        console.log(`达到最大轮询次数${MAX_POLL_ATTEMPTS}`);\n        return {\n          status: \"timeout\",\n          requestId: requestId,\n          message: \"处理时间较长，请稍后检查结果。\"\n        };\n      }\n\n      console.log(`正在轮询请求ID: ${requestId}, 会话ID: ${sessionId}, 尝试次数: ${attempts + 1}`);\n\n      // 尝试不同的请求方法来提高成功率\n      let result = null;\n      let success = false;\n\n      // 方法 1: 使用 JSON 格式的 POST 请求，设置明确的 Content-Type\n      try {\n        console.log(\"尝试方法 1: JSON POST\");\n        const response = await fetchWithTimeout(`${API_URL}/status`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Cache-Control': 'no-cache'\n          },\n          body: JSON.stringify({\n            requestId: requestId,\n            sessionId: sessionId\n          })\n        }, 10000); // 10秒超时\n\n        if (response.ok) {\n          result = await response.json();\n          success = true;\n          console.log(\"方法 1 成功\");\n        }\n      } catch (error) {\n        console.log(\"方法 1 失败:\", error.message);\n      }\n\n      // 方法 2: 使用 URLSearchParams 作为 POST 请求体\n      if (!success) {\n        try {\n          console.log(\"尝试方法 2: URLSearchParams POST\");\n          const params = new URLSearchParams();\n          params.append('requestId', requestId);\n          params.append('sessionId', sessionId);\n\n          const response = await fetchWithTimeout(`${API_URL}/status`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'Cache-Control': 'no-cache'\n            },\n            body: params\n          }, 10000); // 10秒超时\n\n          if (response.ok) {\n            result = await response.json();\n            success = true;\n            console.log(\"方法 2 成功\");\n          }\n        } catch (error) {\n          console.log(\"方法 2 失败:\", error.message);\n        }\n      }\n\n      // 如果所有尝试都失败\n      if (!success) {\n        throw new Error(\"所有请求方法都失败\");\n      }\n\n      // 处理成功的结果\n      if (result.status === 'completed' && result.answer) {\n        console.log(\"收到回答:\", result.answer.substring(0, 50) + \"...\");\n        return result;\n      } else if (result.status === 'failed') {\n        console.error(\"请求失败:\", result.error);\n        return {\n          status: \"error\",\n          error: result.error || \"处理请求时出错\"\n        };\n      } else {\n        // 继续轮询\n        console.log(`状态: ${result.status}，等待${POLL_INTERVAL}ms后重试`);\n        await new Promise(resolve => setTimeout(resolve, POLL_INTERVAL));\n        // 修复：确保传递sessionId到轮询函数中\n        return pollForResult(requestId, sessionId, attempts + 1);\n      }\n    } catch (error) {\n      console.error(\"轮询错误:\", error);\n      // 增加重试次数\n      if (attempts < MAX_POLL_ATTEMPTS - 1) {\n        console.log(`轮询出错，${POLL_INTERVAL}ms后重试...`);\n        await new Promise(resolve => setTimeout(resolve, POLL_INTERVAL));\n        // 修复：确保传递sessionId到轮询函数中\n        return pollForResult(requestId, sessionId, attempts + 1);\n      }\n      // 如果达到最大重试次数，返回超时状态\n      return {\n        status: \"timeout\",\n        requestId: requestId,\n        message: \"处理时间较长，请稍后检查结果。\"\n      };\n    }\n  }, []);\n\n  // 检查特定请求的答案 - 修复为使用sessionId\n  const checkAnswer = useCallback(async (requestId) => {\n    if (!requestId) return null;\n\n    try {\n      // 修复：传递sessionId而非0\n      const result = await pollForResult(requestId, sessionId, 0);\n      return result;\n    } catch (error) {\n      console.error(\"检查答案失败:\", error);\n      return {\n        status: \"error\",\n        error: `检查失败: ${error.message}`\n      };\n    }\n  }, [pollForResult, sessionId]); // 添加sessionId到依赖数组\n\n  return {\n    initiateRequest,\n    handleStreamingResponse,\n    pollForResult,\n    checkAnswer,\n    isProcessing,\n    setIsProcessing,\n    streamFailureCount\n  };\n}\n\nexport default useChatApi;"],"mappings":"AAAA;AACA,OAASA,QAAQ,CAAEC,WAAW,CAAEC,SAAS,KAAQ,OAAO,CACxD,OAASC,SAAS,KAAQ,oBAAoB,CAC9C,OAASC,cAAc,KAAQ,wBAAwB,CAEvD;AACA,KAAM,CAAAC,aAAa,CAAG,IAAI,CAC1B,KAAM,CAAAC,iBAAiB,CAAG,EAAE,CAE5B,KAAM,CAAAC,OAAO,CAAGJ,SAAS,CAAC,CAAC,CAE3B;AACA,KAAM,CAAAK,gBAAgB,CAAG,cAAAA,CAAOC,GAAG,CAAEC,OAAO,CAAwB,IAAtB,CAAAC,SAAS,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CAC7D,KAAM,CAAAG,UAAU,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CACxC,KAAM,CAAAC,SAAS,CAAGC,UAAU,CAAC,IAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,CAAER,SAAS,CAAC,CAEjE,GAAI,CACF,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACZ,GAAG,CAAE,CAChC,GAAGC,OAAO,CACVY,MAAM,CAAEP,UAAU,CAACO,MACrB,CAAC,CAAC,CACFC,YAAY,CAACN,SAAS,CAAC,CACvB,MAAO,CAAAG,QAAQ,CACjB,CAAE,MAAOI,KAAK,CAAE,CACdD,YAAY,CAACN,SAAS,CAAC,CACvB,GAAIO,KAAK,CAACC,IAAI,GAAK,YAAY,CAAE,CAC/B,KAAM,IAAI,CAAAC,KAAK,CAAC,SAASf,SAAS,KAAK,CAAC,CAC1C,CACA,KAAM,CAAAa,KAAK,CACb,CACF,CAAC,CAED;AACA,QAAS,CAAAG,UAAUA,CAACC,GAAG,CAAE,CACvB,GAAI,CAAAC,IAAI,CAAG,CAAC,CACZ,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,GAAG,CAACf,MAAM,CAAEiB,CAAC,EAAE,CAAE,CACnCD,IAAI,CAAI,CAACA,IAAI,EAAI,CAAC,EAAIA,IAAI,CAAID,GAAG,CAACG,UAAU,CAACD,CAAC,CAAC,CAC/CD,IAAI,EAAI,CAAC,CAAE;AACb,CACA,MAAO,CAAAA,IAAI,CACb,CAEA,QAAS,CAAAG,UAAUA,CAACC,SAAS,CAAEC,YAAY,CAAE,CAC3C,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGpC,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACqC,eAAe,CAAC,CAAGrC,QAAQ,CAAC,GAAI,CAAAsC,GAAG,CAAC,CAAC,CAAC,CAC7C,KAAM,CAACC,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGxC,QAAQ,CAAC,CAAC,CAAC,CAE/D;AACAE,SAAS,CAAC,IAAM,CACd;AACA,GAAIqC,kBAAkB,CAAG,CAAC,CAAE,CAC1BE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAChCC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAE,MAAM,CAAC,CAChD;AACA1B,UAAU,CAAC,IAAM,CACfyB,YAAY,CAACE,UAAU,CAAC,kBAAkB,CAAC,CAC3CL,qBAAqB,CAAC,CAAC,CAAC,CAC1B,CAAC,CAAE,CAAC,CAAG,EAAE,CAAG,IAAI,CAAC,CACnB,CACF,CAAC,CAAE,CAACD,kBAAkB,CAAC,CAAC,CAExB;AACA,KAAM,CAAAO,eAAe,CAAG7C,WAAW,CAAC,eAAO8C,QAAQ,CAAwB,IAAtB,CAAAC,SAAS,CAAApC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CACpE6B,OAAO,CAACC,GAAG,CAAC,mBAAmBT,SAAS,eAAee,SAAS,UAAUD,QAAQ,CAAClC,MAAM,EAAE,CAAC,CAE5F;AACA,KAAM,CAAAoC,sBAAsB,CAAGN,YAAY,CAACO,OAAO,CAAC,kBAAkB,CAAC,GAAK,MAAM,CAClF,GAAID,sBAAsB,EAAID,SAAS,CAAE,CACvCP,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAChCM,SAAS,CAAG,KAAK,CACnB,CAEA,GAAI,CACF;AACA,KAAM,CAAAG,YAAY,CAAGxB,UAAU,CAACoB,QAAQ,CAAC,CAEzC;AACA,GAAIV,eAAe,CAACe,GAAG,CAACD,YAAY,CAAC,CAAE,CACrCV,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAC3B,MAAO,CAAEW,UAAU,CAAE,IAAK,CAAC,CAC7B,CAEA;AACAhB,eAAe,CAACiB,GAAG,CAACH,YAAY,CAAE,IAAI,CAAC,CAEvC,GAAI,CACF;AACA,KAAM,CAAAI,gBAAgB,CAAGR,QAAQ,CAAClC,MAAM,CAAG,EAAE,EACrB,CAACkC,QAAQ,CAACS,QAAQ,CAAC,IAAI,CAAC,EACxB,CAACT,QAAQ,CAACS,QAAQ,CAAC,KAAK,CAAC,EACzB,CAACT,QAAQ,CAACS,QAAQ,CAAC,IAAI,CAAC,CAEhD,KAAM,CAAAC,kBAAkB,CAAGV,QAAQ,CAACW,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAExD;AACA,GAAIvD,cAAc,CAACqD,kBAAkB,CAAC,EAAI,CAACT,SAAS,CAAE,CACpD,MAAO,CACLY,YAAY,CAAE,IAAI,CAClBC,MAAM,CAAEzD,cAAc,CAACqD,kBAAkB,CAC3C,CAAC,CACH,CAEA,GAAI,CAAAK,OAAO,CAAG,CAAC,CACf,KAAM,CAAAC,UAAU,CAAG,CAAC,CACpB,GAAI,CAAAC,SAAS,CAAG,IAAI,CAEpB,MAAOF,OAAO,CAAGC,UAAU,CAAE,CAC3B,GAAI,CACFtB,OAAO,CAACC,GAAG,CAAC,QAAQoB,OAAO,CAAG,CAAC,IAAIC,UAAU,KAAK,CAAC,CACnD,KAAM,CAAA3C,QAAQ,CAAG,KAAM,CAAAZ,gBAAgB,CAAC,GAAGD,OAAO,MAAM,CAAE,CACxD0D,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAE,UACnB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBtB,QAAQ,CACRd,SAAS,CAAEA,SAAS,CACpBqC,kBAAkB,CAAEf,gBAAgB,EAAI,CAACP,SAAS,CAClDuB,MAAM,CAAEvB,SACV,CAAC,CACH,CAAC,CAAE,KAAK,CAAC,CAAE;AAEX,GAAI,CAAC5B,QAAQ,CAACoD,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAArD,QAAQ,CAACsD,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAhD,KAAK,CAAC,UAAUN,QAAQ,CAACuD,MAAM,MAAMF,SAAS,EAAE,CAAC,CAC7D,CAEA,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAxD,QAAQ,CAACyD,IAAI,CAAC,CAAC,CAClCpC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAEoC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAAC,CAE1C,GAAIA,IAAI,CAAC3C,SAAS,CAAE,CAClBQ,OAAO,CAACC,GAAG,CAAC,WAAWkC,IAAI,CAAC3C,SAAS,EAAE,CAAC,CACxCC,YAAY,CAAC0C,IAAI,CAAC3C,SAAS,CAAC,CAC9B,CAEA,GAAI2C,IAAI,CAACf,MAAM,CAAE,CACfpB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC,CACvB,MAAO,CACLkB,YAAY,CAAE,IAAI,CAClBC,MAAM,CAAEe,IAAI,CAACf,MACf,CAAC,CACH,CAEA,GAAIe,IAAI,CAACI,YAAY,CAAE,CACrBvC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAE,CACrBuC,WAAW,CAAE,CAAC,CAACL,IAAI,CAACI,YAAY,CAACE,WAAW,CAC5CC,SAAS,CAAE,CAAC,CAACP,IAAI,CAACI,YAAY,CAACI,MAAM,CACrCC,KAAK,CAAET,IAAI,CAACI,YAAY,CAACK,KAC3B,CAAC,CAAC,CACF,MAAO,CACLzB,YAAY,CAAE,KAAK,CACnBoB,YAAY,CAAEJ,IAAI,CAACI,YAAY,CAC/BM,SAAS,CAAEV,IAAI,CAACU,SAClB,CAAC,CACH,CAEA,GAAIV,IAAI,CAACW,aAAa,CAAE,CACtB9C,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC,CACrB,MAAO,CACLkB,YAAY,CAAE,KAAK,CACnB2B,aAAa,CAAEX,IAAI,CAACW,aAAa,CACjCD,SAAS,CAAEV,IAAI,CAACU,SAClB,CAAC,CACH,CAEA,GAAIV,IAAI,CAACY,kBAAkB,CAAE,CAC3B/C,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAC9B,MAAO,CAAAI,eAAe,CAACC,QAAQ,CAAE,KAAK,CAAC,CACzC,CAEAN,OAAO,CAACC,GAAG,CAAC,WAAWkC,IAAI,CAACU,SAAS,EAAE,CAAC,CACxC,MAAO,CACL1B,YAAY,CAAE,KAAK,CACnB0B,SAAS,CAAEV,IAAI,CAACU,SAAS,CACzBrD,SAAS,CAAE2C,IAAI,CAAC3C,SAAS,EAAIA,SAC/B,CAAC,CACH,CAAE,MAAOT,KAAK,CAAE,CACdwC,SAAS,CAAGxC,KAAK,CACjBsC,OAAO,EAAE,CACTrB,OAAO,CAACgD,IAAI,CAAC,OAAO3B,OAAO,OAAOtC,KAAK,CAACkE,OAAO,EAAE,CAAC,CAElD,GAAI5B,OAAO,CAAGC,UAAU,CAAE,CACxB,KAAM,CAAA4B,KAAK,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAE/B,OAAO,CAAC,CAAG,IAAI,CACzCrB,OAAO,CAACC,GAAG,CAAC,GAAGiD,KAAK,UAAU,CAAC,CAC/B,KAAM,IAAI,CAAAG,OAAO,CAACC,OAAO,EAAI7E,UAAU,CAAC6E,OAAO,CAAEJ,KAAK,CAAC,CAAC,CAC1D,CACF,CACF,CAEA,KAAM,CAAA3B,SAAS,EAAI,GAAI,CAAAtC,KAAK,CAAC,WAAW,CAAC,CAC3C,CAAC,OAAS,CACR;AACAW,eAAe,CAAC2D,MAAM,CAAC7C,YAAY,CAAC,CACtC,CACF,CAAE,MAAO3B,KAAK,CAAE,CACdiB,OAAO,CAACjB,KAAK,CAAC,UAAU,CAAEA,KAAK,CAAC,CAChC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAAE,CAACa,eAAe,CAAEJ,SAAS,CAAEC,YAAY,CAAC,CAAC,CAE9C;AACA,KAAM,CAAA+D,uBAAuB,CAAGhG,WAAW,CAAC,MAAO+E,YAAY,CAAEkB,eAAe,GAAK,CACnF,GAAI,KAAAC,qBAAA,CAAAC,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CACF9D,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,CAExB;AACA,GAAI,CAACsC,YAAY,EAAI,CAACA,YAAY,CAACE,WAAW,EAAI,CAACF,YAAY,CAACK,KAAK,EAAI,CAACL,YAAY,CAACI,MAAM,CAAE,CAC7F3C,OAAO,CAACjB,KAAK,CAAC,UAAU,CAAE4C,IAAI,CAACC,SAAS,CAAC,CACvC,GAAGW,YAAY,CACfI,MAAM,CAAEJ,YAAY,EAAIA,YAAY,CAACI,MAAM,CAAG,YAAY,CAAGtE,SAC/D,CAAC,CAAE,IAAI,CAAE,CAAC,CAAC,CAAC,CACZ,KAAM,IAAI,CAAAY,KAAK,CAAC,eAAe,CAAC,CAClC,CAEA;AACAe,OAAO,CAACC,GAAG,CAAC,SAAS,CAAE,CACrB8D,QAAQ,CAAExB,YAAY,CAACE,WAAW,CAClCG,KAAK,CAAEL,YAAY,CAACK,KAAK,CACzBoB,YAAY,CAAE,EAAAN,qBAAA,CAAAnB,YAAY,CAAC0B,QAAQ,UAAAP,qBAAA,iBAArBA,qBAAA,CAAuBtF,MAAM,GAAI,CACjD,CAAC,CAAC,CAEF;AACA,KAAM,CAAA8F,WAAW,CAAG,CAClBtB,KAAK,CAAEL,YAAY,CAACK,KAAK,CACzBqB,QAAQ,CAAE1B,YAAY,CAAC0B,QAAQ,EAAI,CAAC,CAAEE,IAAI,CAAE,MAAM,CAAEC,OAAO,CAAE,OAAQ,CAAC,CAAC,CACvEtC,MAAM,CAAE,IAAI,CACZuC,WAAW,CAAE,EAAAV,qBAAA,CAAApB,YAAY,CAAC+B,UAAU,UAAAX,qBAAA,iBAAvBA,qBAAA,CAAyBU,WAAW,GAAI,GAAG,CACxDE,UAAU,CAAE,EAAAX,sBAAA,CAAArB,YAAY,CAAC+B,UAAU,UAAAV,sBAAA,iBAAvBA,sBAAA,CAAyBW,UAAU,GAAI,IAAI,CACvDC,KAAK,CAAE,EAAAX,sBAAA,CAAAtB,YAAY,CAAC+B,UAAU,UAAAT,sBAAA,iBAAvBA,sBAAA,CAAyBW,KAAK,GAAI,GAC3C,CAAC,CAED;AACA,KAAM,CAAAvG,OAAO,CAAG,CACduD,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,eAAe,CAAE,UAAUc,YAAY,CAACI,MAAM,EAAE,CAChD,cAAc,CAAE,kBAClB,CAAC,CACDjB,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACsC,WAAW,CAClC,CAAC,CAED;AACAlE,OAAO,CAACC,GAAG,CAAC,UAAU,CAAEsC,YAAY,CAACE,WAAW,CAAC,CACjD,KAAM,CAAA9D,QAAQ,CAAG,KAAM,CAAAZ,gBAAgB,CAACwE,YAAY,CAACE,WAAW,CAAExE,OAAO,CAAE,KAAK,CAAC,CAAE;AAEnF;AACA,GAAI,CAACU,QAAQ,CAACoD,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAArD,QAAQ,CAACsD,IAAI,CAAC,CAAC,CACvCjC,OAAO,CAACjB,KAAK,CAAC,YAAY,CAAEiD,SAAS,CAAC,CACtC,KAAM,IAAI,CAAA/C,KAAK,CAAC,cAAcN,QAAQ,CAACuD,MAAM,EAAE,CAAC,CAClD,CAEAlC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAE9B;AACA,KAAM,CAAAwE,MAAM,CAAG9F,QAAQ,CAAC+C,IAAI,CAACgD,SAAS,CAAC,CAAC,CACxC,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAAC,WAAW,CAAC,OAAO,CAAC,CACxC,GAAI,CAAAC,YAAY,CAAG,EAAE,CAErB;AACA,MAAO,IAAI,CAAE,CACX,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAN,MAAM,CAACO,IAAI,CAAC,CAAC,CAE3C,GAAIF,IAAI,CAAE,CACR9E,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC,CACrB,MACF,CAEA;AACA,KAAM,CAAAgF,KAAK,CAAGN,OAAO,CAACO,MAAM,CAACH,KAAK,CAAC,CACnC/E,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEgF,KAAK,CAAC7G,MAAM,CAAC,CAEvC,KAAM,CAAA+G,KAAK,CAAGF,KAAK,CAACG,KAAK,CAAC,IAAI,CAAC,CAE/B,IAAK,KAAM,CAAAC,IAAI,GAAI,CAAAF,KAAK,CAAE,CACxB,GAAIE,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC,CAAE,CAC5B,KAAM,CAAAnD,IAAI,CAAGkD,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAACrE,IAAI,CAAC,CAAC,CAEjC,GAAIiB,IAAI,GAAK,QAAQ,CAAE,CACrB,SACF,CAEA,GAAI,CACF,KAAM,CAAAqD,MAAM,CAAG7D,IAAI,CAAC8D,KAAK,CAACtD,IAAI,CAAC,CAC/B,GAAIqD,MAAM,CAACE,OAAO,EAAIF,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,EAAIH,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,CAACvB,OAAO,CAAE,CAChF,KAAM,CAAAA,OAAO,CAAGoB,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,CAACvB,OAAO,CAC/CS,YAAY,EAAIT,OAAO,CAEvB;AACAX,eAAe,CAACoB,YAAY,CAAC,CAC/B,CACF,CAAE,MAAOe,UAAU,CAAE,CACnB5F,OAAO,CAACgD,IAAI,CAAC,YAAY,CAAE4C,UAAU,CAAC3C,OAAO,CAAC,CAChD,CACF,CACF,CACF,CAEAjD,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC,CAEvB;AACA,KAAM,CAAA4F,YAAY,CAAG,EAAA/B,sBAAA,CAAAvB,YAAY,CAAC0B,QAAQ,CAAC6B,IAAI,CAACC,CAAC,EAAIA,CAAC,CAAC5B,IAAI,GAAK,MAAM,CAAC,UAAAL,sBAAA,iBAAlDA,sBAAA,CAAoDM,OAAO,GAAI,EAAE,CACtF,KAAM,CAAA4B,2BAA2B,CAACxG,SAAS,CAAEqG,YAAY,CAAEhB,YAAY,CAAC,CAExE;AACA9E,qBAAqB,CAAC,CAAC,CAAC,CAExB,MAAO,CAAA8E,YAAY,CACrB,CAAE,MAAO9F,KAAK,CAAE,CACdiB,OAAO,CAACjB,KAAK,CAAC,SAAS,CAAEA,KAAK,CAAC,CAE/B;AACAgB,qBAAqB,CAACkG,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAEvC;AACA,MAAO,MAAK,CACd,CACF,CAAC,CAAE,CAACzG,SAAS,CAAEwG,2BAA2B,CAAC,CAAC,CAE5C;AACA,KAAM,CAAAA,2BAA2B,CAAGxI,WAAW,CAAC,MAAOgC,SAAS,CAAEc,QAAQ,CAAEc,MAAM,GAAK,CACrF,GAAI,CACFpB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAET,SAAS,CAAC,CAErC,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAZ,gBAAgB,CAAC,GAAGD,OAAO,SAAS,CAAE,CAC3D0D,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAE,UACnB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBsE,aAAa,CAAE,IAAI,CACnB1G,SAAS,CAAEA,SAAS,CACpBc,QAAQ,CAAEA,QAAQ,CAClBc,MAAM,CAAEA,MACV,CAAC,CACH,CAAC,CAAE,KAAK,CAAC,CAAE;AAEX,KAAM,CAAAe,IAAI,CAAG,KAAM,CAAAxD,QAAQ,CAACyD,IAAI,CAAC,CAAC,CAClCpC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEkC,IAAI,CAAC,CAE5BnC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC,CACzB,MAAO,KAAI,CACb,CAAE,MAAOlB,KAAK,CAAE,CACdiB,OAAO,CAACjB,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACpC,MAAO,MAAK,CACd,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAoH,aAAa,CAAG3I,WAAW,CAAC,eAAOqF,SAAS,CAAErD,SAAS,CAAmB,IAAjB,CAAA4G,QAAQ,CAAAjI,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACzE;AACA,GAAI,CAACqB,SAAS,EAAIA,SAAS,GAAK,MAAM,CAAE,CACtCQ,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CACnD,MAAO,CACLiC,MAAM,CAAE,OAAO,CACfnD,KAAK,CAAE,+BACT,CAAC,CACH,CAEAiB,OAAO,CAACC,GAAG,CAAC,kBAAkB4C,SAAS,eAAerD,SAAS,cAAc4G,QAAQ,EAAE,CAAC,CAExF,GAAI,CACF;AACA,GAAIA,QAAQ,EAAIvI,iBAAiB,CAAE,CACjCmC,OAAO,CAACC,GAAG,CAAC,WAAWpC,iBAAiB,EAAE,CAAC,CAC3C,MAAO,CACLqE,MAAM,CAAE,SAAS,CACjBW,SAAS,CAAEA,SAAS,CACpBI,OAAO,CAAE,iBACX,CAAC,CACH,CAEAjD,OAAO,CAACC,GAAG,CAAC,aAAa4C,SAAS,WAAWrD,SAAS,WAAW4G,QAAQ,CAAG,CAAC,EAAE,CAAC,CAEhF;AACA,GAAI,CAAAC,MAAM,CAAG,IAAI,CACjB,GAAI,CAAAC,OAAO,CAAG,KAAK,CAEnB;AACA,GAAI,CACFtG,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAChC,KAAM,CAAAtB,QAAQ,CAAG,KAAM,CAAAZ,gBAAgB,CAAC,GAAGD,OAAO,SAAS,CAAE,CAC3D0D,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAE,UACnB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBiB,SAAS,CAAEA,SAAS,CACpBrD,SAAS,CAAEA,SACb,CAAC,CACH,CAAC,CAAE,KAAK,CAAC,CAAE;AAEX,GAAIb,QAAQ,CAACoD,EAAE,CAAE,CACfsE,MAAM,CAAG,KAAM,CAAA1H,QAAQ,CAACyD,IAAI,CAAC,CAAC,CAC9BkE,OAAO,CAAG,IAAI,CACdtG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,CACxB,CACF,CAAE,MAAOlB,KAAK,CAAE,CACdiB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAElB,KAAK,CAACkE,OAAO,CAAC,CACxC,CAEA;AACA,GAAI,CAACqD,OAAO,CAAE,CACZ,GAAI,CACFtG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3C,KAAM,CAAAsG,MAAM,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CACpCD,MAAM,CAACE,MAAM,CAAC,WAAW,CAAE5D,SAAS,CAAC,CACrC0D,MAAM,CAACE,MAAM,CAAC,WAAW,CAAEjH,SAAS,CAAC,CAErC,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAZ,gBAAgB,CAAC,GAAGD,OAAO,SAAS,CAAE,CAC3D0D,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,mCAAmC,CACnD,eAAe,CAAE,UACnB,CAAC,CACDC,IAAI,CAAE6E,MACR,CAAC,CAAE,KAAK,CAAC,CAAE;AAEX,GAAI5H,QAAQ,CAACoD,EAAE,CAAE,CACfsE,MAAM,CAAG,KAAM,CAAA1H,QAAQ,CAACyD,IAAI,CAAC,CAAC,CAC9BkE,OAAO,CAAG,IAAI,CACdtG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,CACxB,CACF,CAAE,MAAOlB,KAAK,CAAE,CACdiB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAElB,KAAK,CAACkE,OAAO,CAAC,CACxC,CACF,CAEA;AACA,GAAI,CAACqD,OAAO,CAAE,CACZ,KAAM,IAAI,CAAArH,KAAK,CAAC,WAAW,CAAC,CAC9B,CAEA;AACA,GAAIoH,MAAM,CAACnE,MAAM,GAAK,WAAW,EAAImE,MAAM,CAACjF,MAAM,CAAE,CAClDpB,OAAO,CAACC,GAAG,CAAC,OAAO,CAAEoG,MAAM,CAACjF,MAAM,CAACsF,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,CAAG,KAAK,CAAC,CAC5D,MAAO,CAAAL,MAAM,CACf,CAAC,IAAM,IAAIA,MAAM,CAACnE,MAAM,GAAK,QAAQ,CAAE,CACrClC,OAAO,CAACjB,KAAK,CAAC,OAAO,CAAEsH,MAAM,CAACtH,KAAK,CAAC,CACpC,MAAO,CACLmD,MAAM,CAAE,OAAO,CACfnD,KAAK,CAAEsH,MAAM,CAACtH,KAAK,EAAI,SACzB,CAAC,CACH,CAAC,IAAM,CACL;AACAiB,OAAO,CAACC,GAAG,CAAC,OAAOoG,MAAM,CAACnE,MAAM,MAAMtE,aAAa,OAAO,CAAC,CAC3D,KAAM,IAAI,CAAAyF,OAAO,CAACC,OAAO,EAAI7E,UAAU,CAAC6E,OAAO,CAAE1F,aAAa,CAAC,CAAC,CAChE;AACA,MAAO,CAAAuI,aAAa,CAACtD,SAAS,CAAErD,SAAS,CAAE4G,QAAQ,CAAG,CAAC,CAAC,CAC1D,CACF,CAAE,MAAOrH,KAAK,CAAE,CACdiB,OAAO,CAACjB,KAAK,CAAC,OAAO,CAAEA,KAAK,CAAC,CAC7B;AACA,GAAIqH,QAAQ,CAAGvI,iBAAiB,CAAG,CAAC,CAAE,CACpCmC,OAAO,CAACC,GAAG,CAAC,QAAQrC,aAAa,UAAU,CAAC,CAC5C,KAAM,IAAI,CAAAyF,OAAO,CAACC,OAAO,EAAI7E,UAAU,CAAC6E,OAAO,CAAE1F,aAAa,CAAC,CAAC,CAChE;AACA,MAAO,CAAAuI,aAAa,CAACtD,SAAS,CAAErD,SAAS,CAAE4G,QAAQ,CAAG,CAAC,CAAC,CAC1D,CACA;AACA,MAAO,CACLlE,MAAM,CAAE,SAAS,CACjBW,SAAS,CAAEA,SAAS,CACpBI,OAAO,CAAE,iBACX,CAAC,CACH,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAA0D,WAAW,CAAGnJ,WAAW,CAAC,KAAO,CAAAqF,SAAS,EAAK,CACnD,GAAI,CAACA,SAAS,CAAE,MAAO,KAAI,CAE3B,GAAI,CACF;AACA,KAAM,CAAAwD,MAAM,CAAG,KAAM,CAAAF,aAAa,CAACtD,SAAS,CAAErD,SAAS,CAAE,CAAC,CAAC,CAC3D,MAAO,CAAA6G,MAAM,CACf,CAAE,MAAOtH,KAAK,CAAE,CACdiB,OAAO,CAACjB,KAAK,CAAC,SAAS,CAAEA,KAAK,CAAC,CAC/B,MAAO,CACLmD,MAAM,CAAE,OAAO,CACfnD,KAAK,CAAE,SAASA,KAAK,CAACkE,OAAO,EAC/B,CAAC,CACH,CACF,CAAC,CAAE,CAACkD,aAAa,CAAE3G,SAAS,CAAC,CAAC,CAAE;AAEhC,MAAO,CACLa,eAAe,CACfmD,uBAAuB,CACvB2C,aAAa,CACbQ,WAAW,CACXjH,YAAY,CACZC,eAAe,CACfG,kBACF,CAAC,CACH,CAEA,cAAe,CAAAP,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}