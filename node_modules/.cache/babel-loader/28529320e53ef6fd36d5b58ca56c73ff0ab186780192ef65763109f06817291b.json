{"ast":null,"code":"// src/components/ChatBot.jsx\nimport React,{useState,useEffect,useCallback}from'react';import MessageList from'./MessageList';import ChatInput from'./ChatInput';import StreamToggle from'./StreamToggle';import useLocalStorage from'../hooks/useLocalStorage';import useChatApi from'../hooks/useChatApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatBot(){// 状态管理\nconst[messages,setMessages]=useState([]);const[sessionId,setSessionId]=useLocalStorage('chatSessionId',null);const[useStream,setUseStream]=useState(true);const[thinking,setThinking]=useState(null);const[isProcessing,setIsProcessing]=useState(false);// 使用自定义Hook进行API通信\nconst{initiateRequest,handleStreamingResponse,pollForResult,checkAnswer,streamFailureCount}=useChatApi(sessionId,setSessionId);// 处理流式响应失败时的UI反馈\nuseEffect(()=>{if(streamFailureCount>=3&&useStream){setUseStream(false);addMessage('ai','已自动关闭流式响应模式，因为检测到多次连接失败。',false,true);}},[streamFailureCount,useStream]);// 添加消息到聊天记录\nconst addMessage=useCallback(function(type,content){let isStreaming=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let error=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;setMessages(prev=>[...prev,{type,content,isStreaming,error}]);},[]);// 更新流式消息内容\nconst updateStreamMessage=useCallback(content=>{setMessages(prev=>{const newMessages=[...prev];const lastIndex=newMessages.length-1;if(lastIndex>=0&&newMessages[lastIndex].isStreaming){newMessages[lastIndex]={...newMessages[lastIndex],content};}return newMessages;});},[]);// 检查特定请求的结果\nconst handleCheckAnswer=useCallback(async requestId=>{const thinkingId='checking-'+Date.now();setThinking({id:thinkingId,text:'检查结果中'});setIsProcessing(true);try{const result=await checkAnswer(requestId);setThinking(null);handleResult(result);}catch(error){setThinking(null);addMessage('ai',`检查失败: ${error.message}`,false,true);}finally{setIsProcessing(false);}},[addMessage,checkAnswer]);// 处理API结果 - 修复版本\n// 3. src/components/ChatBot.jsx - 修改handleResult部分\nconst handleResult=useCallback(result=>{if(result.status===\"timeout\"){// 超时但仍在处理 - 使用结构化对象而非HTML字符串\naddMessage('ai',{type:'processing-message',message:result.message,requestId:result.requestId},false,false);return;}console.log(`处理结果: status=${result.status}, hasAnswer=${!!result.answer}`);if(result.answer){// 更新会话ID\nif(result.sessionId){setSessionId(result.sessionId);}// 渲染回答\naddMessage('ai',result.answer);}else if(result.status===\"error\"){// 处理错误\naddMessage('ai',result.error||'处理完成，但没有获得回答',false,true);}else{// 没有回答\naddMessage('ai','处理完成，但没有获得回答',false,true);}},[addMessage,setSessionId]);const pollWithThinkingUpdates=useCallback(async(requestId,sessionId)=>{let attempts=0;let pollResult;do{// 更新思考状态\nsetThinking(prev=>({...prev,attempts:attempts}));// 执行轮询\npollResult=await pollForResult(requestId,sessionId,attempts);attempts++;// 如果完成或失败，退出循环\nif(pollResult.status==='completed'||pollResult.status==='failed'||pollResult.status==='error'||pollResult.status==='timeout'){break;}// 等待下一次轮询\nawait new Promise(resolve=>setTimeout(resolve,2000));}while(attempts<30);// 避免无限循环\nreturn pollResult;},[pollForResult]);// 处理用户发送的消息\nconst handleSendMessage=useCallback(async question=>{if(!question.trim())return;// 禁用输入，显示处理状态\nsetIsProcessing(true);// 添加用户消息到UI\naddMessage('user',question);// 添加\"思考中\"的提示\nconst thinkingId='thinking-'+Date.now();setThinking({id:thinkingId,attempts:0});try{console.log(`发送问题: ${question}`);const result=await initiateRequest(question,useStream);// 更新会话ID\nif(result.sessionId){setSessionId(result.sessionId);console.log(`更新会话ID: ${result.sessionId}`);}// 1. 处理直接回答\nif(result.directAnswer){console.log(\"收到直接回答\");setThinking(null);addMessage('ai',result.answer);return;}// 2. 处理流式响应\nif(result.streamConfig&&useStream){console.log(\"开始流式响应处理\");setThinking(null);// 添加初始流式消息\naddMessage('ai','',true);// 开始流式传输\nconst streamResult=await handleStreamingResponse(result.streamConfig,updateStreamMessage);// 如果流式传输失败，回退到轮询\nif(streamResult===false){console.log(\"流式传输失败，回退到轮询\");if(result.requestId&&result.sessionId){const pollResult=await pollForResult(result.requestId,result.sessionId,0);handleResult(pollResult);}}return;}// 3. 标准轮询处理\nif(result.requestId&&result.sessionId){console.log(`开始轮询结果: ${result.requestId}`);// 更新思考状态以显示不同的文本\nlet attempts=0;const pollWithUpdatingThinking=async()=>{setThinking(prev=>({...prev,attempts:attempts}));const pollResult=await pollForResult(result.requestId,result.sessionId,attempts);attempts++;return pollResult;};const pollResult=await pollWithUpdatingThinking();setThinking(null);handleResult(pollResult);}else{console.error(\"缺少必要的ID:\",{hasRequestId:!!result.requestId,hasSessionId:!!result.sessionId});setThinking(null);addMessage('ai','无法获取请求ID或会话ID，请重试',false,true);}}catch(err){// 移除思考中状态\nsetThinking(null);console.error('处理失败:',err);addMessage('ai',`获取回答失败: ${err.message}`,false,true);}finally{// 恢复输入状态\nsetIsProcessing(false);}},[addMessage,handleResult,handleStreamingResponse,initiateRequest,pollForResult,updateStreamMessage,useStream,setSessionId]);// 清除会话\nconst handleClearSession=useCallback(()=>{if(window.confirm('确定要开始新的对话吗？这将清除当前的对话历史。')){localStorage.removeItem('chatSessionId');setSessionId(null);setMessages([]);addMessage('ai','已开始新的对话。');}},[addMessage,setSessionId]);// 切换流式响应模式\nconst handleToggleStream=useCallback(e=>{setUseStream(e.target.checked);},[]);return/*#__PURE__*/_jsxs(\"div\",{id:\"chat-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Q & A\"}),/*#__PURE__*/_jsx(MessageList,{messages:messages,thinking:thinking,checkAnswerHandler:handleCheckAnswer}),/*#__PURE__*/_jsx(ChatInput,{onSendMessage:handleSendMessage,disabled:isProcessing}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(StreamToggle,{checked:useStream,onChange:handleToggleStream}),/*#__PURE__*/_jsx(\"button\",{id:\"clear-session\",onClick:handleClearSession,title:\"\\u5F00\\u59CB\\u65B0\\u7684\\u5BF9\\u8BDD\\uFF0C\\u6E05\\u9664\\u5BF9\\u8BDD\\u5386\\u53F2\",children:\"\\u65B0\\u5BF9\\u8BDD\"})]})]});}export default ChatBot;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MessageList","ChatInput","StreamToggle","useLocalStorage","useChatApi","jsx","_jsx","jsxs","_jsxs","ChatBot","messages","setMessages","sessionId","setSessionId","useStream","setUseStream","thinking","setThinking","isProcessing","setIsProcessing","initiateRequest","handleStreamingResponse","pollForResult","checkAnswer","streamFailureCount","addMessage","type","content","isStreaming","arguments","length","undefined","error","prev","updateStreamMessage","newMessages","lastIndex","handleCheckAnswer","requestId","thinkingId","Date","now","id","text","result","handleResult","message","status","console","log","answer","pollWithThinkingUpdates","attempts","pollResult","Promise","resolve","setTimeout","handleSendMessage","question","trim","directAnswer","streamConfig","streamResult","pollWithUpdatingThinking","hasRequestId","hasSessionId","err","handleClearSession","window","confirm","localStorage","removeItem","handleToggleStream","e","target","checked","children","checkAnswerHandler","onSendMessage","disabled","className","onChange","onClick","title"],"sources":["/Users/depblu/Documents/GitHub/JasonDepblu.github.io/src/components/ChatBot.jsx"],"sourcesContent":["// src/components/ChatBot.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MessageList from './MessageList';\nimport ChatInput from './ChatInput';\nimport StreamToggle from './StreamToggle';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport useChatApi from '../hooks/useChatApi';\n\nfunction ChatBot() {\n  // 状态管理\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useLocalStorage('chatSessionId', null);\n  const [useStream, setUseStream] = useState(true);\n  const [thinking, setThinking] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 使用自定义Hook进行API通信\n  const {\n    initiateRequest,\n    handleStreamingResponse,\n    pollForResult,\n    checkAnswer,\n    streamFailureCount\n  } = useChatApi(sessionId, setSessionId);\n\n  // 处理流式响应失败时的UI反馈\n  useEffect(() => {\n    if (streamFailureCount >= 3 && useStream) {\n      setUseStream(false);\n      addMessage('ai', '已自动关闭流式响应模式，因为检测到多次连接失败。', false, true);\n    }\n  }, [streamFailureCount, useStream]);\n\n  // 添加消息到聊天记录\n  const addMessage = useCallback((type, content, isStreaming = false, error = false) => {\n    setMessages(prev => [...prev, { type, content, isStreaming, error }]);\n  }, []);\n\n  // 更新流式消息内容\n  const updateStreamMessage = useCallback((content) => {\n    setMessages(prev => {\n      const newMessages = [...prev];\n      const lastIndex = newMessages.length - 1;\n\n      if (lastIndex >= 0 && newMessages[lastIndex].isStreaming) {\n        newMessages[lastIndex] = {\n          ...newMessages[lastIndex],\n          content\n        };\n      }\n\n      return newMessages;\n    });\n  }, []);\n\n  // 检查特定请求的结果\n  const handleCheckAnswer = useCallback(async (requestId) => {\n    const thinkingId = 'checking-' + Date.now();\n    setThinking({\n      id: thinkingId,\n      text: '检查结果中'\n    });\n    setIsProcessing(true);\n\n    try {\n      const result = await checkAnswer(requestId);\n      setThinking(null);\n      handleResult(result);\n    } catch (error) {\n      setThinking(null);\n      addMessage('ai', `检查失败: ${error.message}`, false, true);\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [addMessage, checkAnswer]);\n\n  // 处理API结果 - 修复版本\n  // 3. src/components/ChatBot.jsx - 修改handleResult部分\n  const handleResult = useCallback((result) => {\n    if (result.status === \"timeout\") {\n      // 超时但仍在处理 - 使用结构化对象而非HTML字符串\n      addMessage('ai', {\n        type: 'processing-message',\n        message: result.message,\n        requestId: result.requestId\n      }, false, false);\n      return;\n    }\n    console.log(`处理结果: status=${result.status}, hasAnswer=${!!result.answer}`);\n\n    if (result.answer) {\n      // 更新会话ID\n      if (result.sessionId) {\n        setSessionId(result.sessionId);\n      }\n\n      // 渲染回答\n      addMessage('ai', result.answer);\n    } else if (result.status === \"error\") {\n      // 处理错误\n      addMessage('ai', result.error || '处理完成，但没有获得回答', false, true);\n    } else {\n      // 没有回答\n      addMessage('ai', '处理完成，但没有获得回答', false, true);\n    }\n  }, [addMessage, setSessionId]);\n\n  const pollWithThinkingUpdates = useCallback(async (requestId, sessionId) => {\n    let attempts = 0;\n    let pollResult;\n\n    do {\n      // 更新思考状态\n      setThinking(prev => ({\n        ...prev,\n        attempts: attempts\n      }));\n\n      // 执行轮询\n      pollResult = await pollForResult(requestId, sessionId, attempts);\n      attempts++;\n\n      // 如果完成或失败，退出循环\n      if (pollResult.status === 'completed' || pollResult.status === 'failed' ||\n          pollResult.status === 'error' || pollResult.status === 'timeout') {\n        break;\n      }\n\n      // 等待下一次轮询\n      await new Promise(resolve => setTimeout(resolve, 2000));\n    } while (attempts < 30); // 避免无限循环\n\n    return pollResult;\n  }, [pollForResult]);\n\n  // 处理用户发送的消息\n  const handleSendMessage = useCallback(async (question) => {\n    if (!question.trim()) return;\n\n    // 禁用输入，显示处理状态\n    setIsProcessing(true);\n\n    // 添加用户消息到UI\n    addMessage('user', question);\n\n    // 添加\"思考中\"的提示\n    const thinkingId = 'thinking-' + Date.now();\n    setThinking({\n      id: thinkingId,\n      attempts: 0\n    });\n\n    try {\n      console.log(`发送问题: ${question}`);\n      const result = await initiateRequest(question, useStream);\n\n      // 更新会话ID\n      if (result.sessionId) {\n        setSessionId(result.sessionId);\n        console.log(`更新会话ID: ${result.sessionId}`);\n      }\n\n      // 1. 处理直接回答\n      if (result.directAnswer) {\n        console.log(\"收到直接回答\");\n        setThinking(null);\n        addMessage('ai', result.answer);\n        return;\n      }\n\n      // 2. 处理流式响应\n      if (result.streamConfig && useStream) {\n        console.log(\"开始流式响应处理\");\n        setThinking(null);\n\n        // 添加初始流式消息\n        addMessage('ai', '', true);\n\n        // 开始流式传输\n        const streamResult = await handleStreamingResponse(\n          result.streamConfig,\n          updateStreamMessage\n        );\n\n        // 如果流式传输失败，回退到轮询\n        if (streamResult === false) {\n          console.log(\"流式传输失败，回退到轮询\");\n          if (result.requestId && result.sessionId) {\n            const pollResult = await pollForResult(result.requestId, result.sessionId, 0);\n            handleResult(pollResult);\n          }\n        }\n        return;\n      }\n\n      // 3. 标准轮询处理\n      if (result.requestId && result.sessionId) {\n        console.log(`开始轮询结果: ${result.requestId}`);\n\n        // 更新思考状态以显示不同的文本\n        let attempts = 0;\n        const pollWithUpdatingThinking = async () => {\n          setThinking(prev => ({\n            ...prev,\n            attempts: attempts\n          }));\n\n          const pollResult = await pollForResult(result.requestId, result.sessionId, attempts);\n          attempts++;\n\n          return pollResult;\n        };\n\n        const pollResult = await pollWithUpdatingThinking();\n        setThinking(null);\n        handleResult(pollResult);\n      } else {\n        console.error(\"缺少必要的ID:\", {\n          hasRequestId: !!result.requestId,\n          hasSessionId: !!result.sessionId\n        });\n        setThinking(null);\n        addMessage('ai', '无法获取请求ID或会话ID，请重试', false, true);\n      }\n    } catch (err) {\n      // 移除思考中状态\n      setThinking(null);\n      console.error('处理失败:', err);\n      addMessage('ai', `获取回答失败: ${err.message}`, false, true);\n    } finally {\n      // 恢复输入状态\n      setIsProcessing(false);\n    }\n  }, [\n    addMessage,\n    handleResult,\n    handleStreamingResponse,\n    initiateRequest,\n    pollForResult,\n    updateStreamMessage,\n    useStream,\n    setSessionId\n  ]);\n\n  // 清除会话\n  const handleClearSession = useCallback(() => {\n    if (window.confirm('确定要开始新的对话吗？这将清除当前的对话历史。')) {\n      localStorage.removeItem('chatSessionId');\n      setSessionId(null);\n      setMessages([]);\n      addMessage('ai', '已开始新的对话。');\n    }\n  }, [addMessage, setSessionId]);\n\n  // 切换流式响应模式\n  const handleToggleStream = useCallback((e) => {\n    setUseStream(e.target.checked);\n  }, []);\n\n  return (\n    <div id=\"chat-container\">\n      <h1>Q & A</h1>\n\n      <MessageList\n        messages={messages}\n        thinking={thinking}\n        checkAnswerHandler={handleCheckAnswer}\n      />\n\n      <ChatInput\n        onSendMessage={handleSendMessage}\n        disabled={isProcessing}\n      />\n\n      <div className=\"controls\">\n        <StreamToggle\n          checked={useStream}\n          onChange={handleToggleStream}\n        />\n\n        <button\n          id=\"clear-session\"\n          onClick={handleClearSession}\n          title=\"开始新的对话，清除对话历史\"\n        >\n          新对话\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}